/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.jame.contextfree.cfdg.parser;

import net.sf.jame.contextfree.cfdg.lexer.*;
import net.sf.jame.contextfree.cfdg.node.*;
import net.sf.jame.contextfree.cfdg.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AAcfdg1Cfdg */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AAcfdg2Cfdg */
		    {
			ArrayList list = new1();
			push(goTo(0), list);
		    }
		    break;
                    case 2: /* reduce AAcfdg3Cfdg */
		    {
			ArrayList list = new2();
			push(goTo(0), list);
		    }
		    break;
                    case 3: /* reduce AAcfdg4Cfdg */
		    {
			ArrayList list = new3();
			push(goTo(0), list);
		    }
		    break;
                    case 4: /* reduce AAcfdg5Cfdg */
		    {
			ArrayList list = new4();
			push(goTo(0), list);
		    }
		    break;
                    case 5: /* reduce AAcfdg6Cfdg */
		    {
			ArrayList list = new5();
			push(goTo(0), list);
		    }
		    break;
                    case 6: /* reduce AAcfdg7Cfdg */
		    {
			ArrayList list = new6();
			push(goTo(0), list);
		    }
		    break;
                    case 7: /* reduce AAcfdg8Cfdg */
		    {
			ArrayList list = new7();
			push(goTo(0), list);
		    }
		    break;
                    case 8: /* reduce AAcfdg9$Ordered1Cfdg */
		    {
			ArrayList list = new8();
			push(goTo(0), list);
		    }
		    break;
                    case 9: /* reduce AAcfdg10$Ordered1Cfdg */
		    {
			ArrayList list = new9();
			push(goTo(0), list);
		    }
		    break;
                    case 10: /* reduce AAcfdg11$Ordered1Cfdg */
		    {
			ArrayList list = new10();
			push(goTo(0), list);
		    }
		    break;
                    case 11: /* reduce AAcfdg12$Ordered1Cfdg */
		    {
			ArrayList list = new11();
			push(goTo(0), list);
		    }
		    break;
                    case 12: /* reduce AAcfdg13$Ordered1Cfdg */
		    {
			ArrayList list = new12();
			push(goTo(0), list);
		    }
		    break;
                    case 13: /* reduce AAcfdg14$Ordered1Cfdg */
		    {
			ArrayList list = new13();
			push(goTo(0), list);
		    }
		    break;
                    case 14: /* reduce AAcfdg15$Ordered1Cfdg */
		    {
			ArrayList list = new14();
			push(goTo(0), list);
		    }
		    break;
                    case 15: /* reduce AAcfdg16$Ordered1Cfdg */
		    {
			ArrayList list = new15();
			push(goTo(0), list);
		    }
		    break;
                    case 16: /* reduce ARuleFigureDeclaration */
		    {
			ArrayList list = new16();
			push(goTo(1), list);
		    }
		    break;
                    case 17: /* reduce APathFigureDeclaration */
		    {
			ArrayList list = new17();
			push(goTo(1), list);
		    }
		    break;
                    case 18: /* reduce AStartshapeDeclaration */
		    {
			ArrayList list = new18();
			push(goTo(2), list);
		    }
		    break;
                    case 19: /* reduce AIncludeDeclaration */
		    {
			ArrayList list = new19();
			push(goTo(3), list);
		    }
		    break;
                    case 20: /* reduce ABackgroundDeclaration */
		    {
			ArrayList list = new20();
			push(goTo(4), list);
		    }
		    break;
                    case 21: /* reduce ADefaultTileDeclaration */
		    {
			ArrayList list = new21();
			push(goTo(5), list);
		    }
		    break;
                    case 22: /* reduce AOrderedTileDeclaration */
		    {
			ArrayList list = new22();
			push(goTo(5), list);
		    }
		    break;
                    case 23: /* reduce AAruledeclaration1RuleDeclaration */
		    {
			ArrayList list = new23();
			push(goTo(6), list);
		    }
		    break;
                    case 24: /* reduce AAruledeclaration2RuleDeclaration */
		    {
			ArrayList list = new24();
			push(goTo(6), list);
		    }
		    break;
                    case 25: /* reduce AApathdeclaration1PathDeclaration */
		    {
			ArrayList list = new25();
			push(goTo(7), list);
		    }
		    break;
                    case 26: /* reduce AApathdeclaration2PathDeclaration */
		    {
			ArrayList list = new26();
			push(goTo(7), list);
		    }
		    break;
                    case 27: /* reduce AMultiShapeReplacementDeclaration */
		    {
			ArrayList list = new27();
			push(goTo(8), list);
		    }
		    break;
                    case 28: /* reduce ASingleShapeReplacementDeclaration */
		    {
			ArrayList list = new28();
			push(goTo(8), list);
		    }
		    break;
                    case 29: /* reduce AAdefaultsingleshapereplacement1SingleShapeReplacement */
		    {
			ArrayList list = new29();
			push(goTo(9), list);
		    }
		    break;
                    case 30: /* reduce AAdefaultsingleshapereplacement2SingleShapeReplacement */
		    {
			ArrayList list = new30();
			push(goTo(9), list);
		    }
		    break;
                    case 31: /* reduce AAorderedsingleshapereplacement1SingleShapeReplacement */
		    {
			ArrayList list = new31();
			push(goTo(9), list);
		    }
		    break;
                    case 32: /* reduce AAorderedsingleshapereplacement2SingleShapeReplacement */
		    {
			ArrayList list = new32();
			push(goTo(9), list);
		    }
		    break;
                    case 33: /* reduce AListShapeReplacement */
		    {
			ArrayList list = new33();
			push(goTo(10), list);
		    }
		    break;
                    case 34: /* reduce AMultiShapeReplacement */
		    {
			ArrayList list = new34();
			push(goTo(11), list);
		    }
		    break;
                    case 35: /* reduce ASingleMultiShapeReplacementBody */
		    {
			ArrayList list = new35();
			push(goTo(12), list);
		    }
		    break;
                    case 36: /* reduce AListMultiShapeReplacementBody */
		    {
			ArrayList list = new36();
			push(goTo(12), list);
		    }
		    break;
                    case 37: /* reduce AStarOperator */
		    {
			ArrayList list = new37();
			push(goTo(13), list);
		    }
		    break;
                    case 38: /* reduce APlusOperator */
		    {
			ArrayList list = new38();
			push(goTo(13), list);
		    }
		    break;
                    case 39: /* reduce AMinusOperator */
		    {
			ArrayList list = new39();
			push(goTo(13), list);
		    }
		    break;
                    case 40: /* reduce ASlashOperator */
		    {
			ArrayList list = new40();
			push(goTo(13), list);
		    }
		    break;
                    case 41: /* reduce AArrowOperator */
		    {
			ArrayList list = new41();
			push(goTo(13), list);
		    }
		    break;
                    case 42: /* reduce AMultiPathOperationDeclaration */
		    {
			ArrayList list = new42();
			push(goTo(14), list);
		    }
		    break;
                    case 43: /* reduce APathPathOperationDeclaration */
		    {
			ArrayList list = new43();
			push(goTo(14), list);
		    }
		    break;
                    case 44: /* reduce AAdefaultsimplepathoperation1SimplePathOperation */
		    {
			ArrayList list = new44();
			push(goTo(15), list);
		    }
		    break;
                    case 45: /* reduce AAdefaultsimplepathoperation2SimplePathOperation */
		    {
			ArrayList list = new45();
			push(goTo(15), list);
		    }
		    break;
                    case 46: /* reduce AAorderedsimplepathoperation1SimplePathOperation */
		    {
			ArrayList list = new46();
			push(goTo(15), list);
		    }
		    break;
                    case 47: /* reduce AAorderedsimplepathoperation2SimplePathOperation */
		    {
			ArrayList list = new47();
			push(goTo(15), list);
		    }
		    break;
                    case 48: /* reduce AAdefaultpathoppathoperation1PathopPathOperation */
		    {
			ArrayList list = new48();
			push(goTo(16), list);
		    }
		    break;
                    case 49: /* reduce AAdefaultpathoppathoperation2PathopPathOperation */
		    {
			ArrayList list = new49();
			push(goTo(16), list);
		    }
		    break;
                    case 50: /* reduce AAorderedpathoppathoperation1PathopPathOperation */
		    {
			ArrayList list = new50();
			push(goTo(16), list);
		    }
		    break;
                    case 51: /* reduce AAorderedpathoppathoperation2PathopPathOperation */
		    {
			ArrayList list = new51();
			push(goTo(16), list);
		    }
		    break;
                    case 52: /* reduce ASimplePathOperation */
		    {
			ArrayList list = new52();
			push(goTo(17), list);
		    }
		    break;
                    case 53: /* reduce APathopPathOperation */
		    {
			ArrayList list = new53();
			push(goTo(17), list);
		    }
		    break;
                    case 54: /* reduce AListPathOperation */
		    {
			ArrayList list = new54();
			push(goTo(18), list);
		    }
		    break;
                    case 55: /* reduce AMultiPathOperation */
		    {
			ArrayList list = new55();
			push(goTo(19), list);
		    }
		    break;
                    case 56: /* reduce APathMultiPathOperationBody */
		    {
			ArrayList list = new56();
			push(goTo(20), list);
		    }
		    break;
                    case 57: /* reduce AListMultiPathOperationBody */
		    {
			ArrayList list = new57();
			push(goTo(20), list);
		    }
		    break;
                    case 58: /* reduce AXPathPoints */
		    {
			ArrayList list = new58();
			push(goTo(21), list);
		    }
		    break;
                    case 59: /* reduce AYPathPoints */
		    {
			ArrayList list = new59();
			push(goTo(21), list);
		    }
		    break;
                    case 60: /* reduce AX1PathPoints */
		    {
			ArrayList list = new60();
			push(goTo(21), list);
		    }
		    break;
                    case 61: /* reduce AY1PathPoints */
		    {
			ArrayList list = new61();
			push(goTo(21), list);
		    }
		    break;
                    case 62: /* reduce AX2PathPoints */
		    {
			ArrayList list = new62();
			push(goTo(21), list);
		    }
		    break;
                    case 63: /* reduce AY2PathPoints */
		    {
			ArrayList list = new63();
			push(goTo(21), list);
		    }
		    break;
                    case 64: /* reduce ARxPathPoints */
		    {
			ArrayList list = new64();
			push(goTo(21), list);
		    }
		    break;
                    case 65: /* reduce ARyPathPoints */
		    {
			ArrayList list = new65();
			push(goTo(21), list);
		    }
		    break;
                    case 66: /* reduce ARotatePathPoints */
		    {
			ArrayList list = new66();
			push(goTo(21), list);
		    }
		    break;
                    case 67: /* reduce AParametersPathPoints */
		    {
			ArrayList list = new67();
			push(goTo(21), list);
		    }
		    break;
                    case 68: /* reduce AColorPathAdjustment */
		    {
			ArrayList list = new68();
			push(goTo(22), list);
		    }
		    break;
                    case 69: /* reduce AGeometryPathAdjustment */
		    {
			ArrayList list = new69();
			push(goTo(22), list);
		    }
		    break;
                    case 70: /* reduce AStrokePathAdjustment */
		    {
			ArrayList list = new70();
			push(goTo(22), list);
		    }
		    break;
                    case 71: /* reduce AParametersPathAdjustment */
		    {
			ArrayList list = new71();
			push(goTo(22), list);
		    }
		    break;
                    case 72: /* reduce ABackgroundAdjustment */
		    {
			ArrayList list = new72();
			push(goTo(23), list);
		    }
		    break;
                    case 73: /* reduce AAtileadjustment1TileAdjustment */
		    {
			ArrayList list = new73();
			push(goTo(24), list);
		    }
		    break;
                    case 74: /* reduce AAtileadjustment2TileAdjustment */
		    {
			ArrayList list = new74();
			push(goTo(24), list);
		    }
		    break;
                    case 75: /* reduce AXSizeAdjustment */
		    {
			ArrayList list = new75();
			push(goTo(25), list);
		    }
		    break;
                    case 76: /* reduce AYSizeAdjustment */
		    {
			ArrayList list = new76();
			push(goTo(25), list);
		    }
		    break;
                    case 77: /* reduce ASizeSizeAdjustment */
		    {
			ArrayList list = new77();
			push(goTo(25), list);
		    }
		    break;
                    case 78: /* reduce AColorShapeAdjustment */
		    {
			ArrayList list = new78();
			push(goTo(26), list);
		    }
		    break;
                    case 79: /* reduce AGeometryShapeAdjustment */
		    {
			ArrayList list = new79();
			push(goTo(26), list);
		    }
		    break;
                    case 80: /* reduce AZShapeAdjustment */
		    {
			ArrayList list = new80();
			push(goTo(26), list);
		    }
		    break;
                    case 81: /* reduce ASize3ShapeAdjustment */
		    {
			ArrayList list = new81();
			push(goTo(26), list);
		    }
		    break;
                    case 82: /* reduce ASimpleColorAdjustment */
		    {
			ArrayList list = new82();
			push(goTo(27), list);
		    }
		    break;
                    case 83: /* reduce ATargetColorAdjustment */
		    {
			ArrayList list = new83();
			push(goTo(27), list);
		    }
		    break;
                    case 84: /* reduce AHueSimpleColorAdjustment */
		    {
			ArrayList list = new84();
			push(goTo(28), list);
		    }
		    break;
                    case 85: /* reduce ABrightnessSimpleColorAdjustment */
		    {
			ArrayList list = new85();
			push(goTo(28), list);
		    }
		    break;
                    case 86: /* reduce ASaturationSimpleColorAdjustment */
		    {
			ArrayList list = new86();
			push(goTo(28), list);
		    }
		    break;
                    case 87: /* reduce AAalphasimplecoloradjustment1SimpleColorAdjustment */
		    {
			ArrayList list = new87();
			push(goTo(28), list);
		    }
		    break;
                    case 88: /* reduce AAalphasimplecoloradjustment2SimpleColorAdjustment */
		    {
			ArrayList list = new88();
			push(goTo(28), list);
		    }
		    break;
                    case 89: /* reduce AHueTargetColorAdjustment */
		    {
			ArrayList list = new89();
			push(goTo(29), list);
		    }
		    break;
                    case 90: /* reduce ABrightnessTargetColorAdjustment */
		    {
			ArrayList list = new90();
			push(goTo(29), list);
		    }
		    break;
                    case 91: /* reduce ASaturationTargetColorAdjustment */
		    {
			ArrayList list = new91();
			push(goTo(29), list);
		    }
		    break;
                    case 92: /* reduce AAalphatargetcoloradjustment1TargetColorAdjustment */
		    {
			ArrayList list = new92();
			push(goTo(29), list);
		    }
		    break;
                    case 93: /* reduce AAalphatargetcoloradjustment2TargetColorAdjustment */
		    {
			ArrayList list = new93();
			push(goTo(29), list);
		    }
		    break;
                    case 94: /* reduce AXGeometryAdjustment */
		    {
			ArrayList list = new94();
			push(goTo(30), list);
		    }
		    break;
                    case 95: /* reduce AYGeometryAdjustment */
		    {
			ArrayList list = new95();
			push(goTo(30), list);
		    }
		    break;
                    case 96: /* reduce ASizeGeometryAdjustment */
		    {
			ArrayList list = new96();
			push(goTo(30), list);
		    }
		    break;
                    case 97: /* reduce ASize2GeometryAdjustment */
		    {
			ArrayList list = new97();
			push(goTo(30), list);
		    }
		    break;
                    case 98: /* reduce AFlipGeometryAdjustment */
		    {
			ArrayList list = new98();
			push(goTo(30), list);
		    }
		    break;
                    case 99: /* reduce ASkewGeometryAdjustment */
		    {
			ArrayList list = new99();
			push(goTo(30), list);
		    }
		    break;
                    case 100: /* reduce ARotateGeometryAdjustment */
		    {
			ArrayList list = new100();
			push(goTo(30), list);
		    }
		    break;
                    case 101: /* reduce ANumberExpression */
		    {
			ArrayList list = new101();
			push(goTo(31), list);
		    }
		    break;
                    case 102: /* reduce ANestedExpression */
		    {
			ArrayList list = new102();
			push(goTo(31), list);
		    }
		    break;
                    case 103: /* reduce AFunctionExpression */
		    {
			ArrayList list = new103();
			push(goTo(31), list);
		    }
		    break;
                    case 104: /* reduce ANumberExpression2 */
		    {
			ArrayList list = new104();
			push(goTo(32), list);
		    }
		    break;
                    case 105: /* reduce AFunctionExpression2 */
		    {
			ArrayList list = new105();
			push(goTo(32), list);
		    }
		    break;
                    case 106: /* reduce ANestedExpression2 */
		    {
			ArrayList list = new106();
			push(goTo(32), list);
		    }
		    break;
                    case 107: /* reduce AComposedExpression2 */
		    {
			ArrayList list = new107();
			push(goTo(32), list);
		    }
		    break;
                    case 108: /* reduce AArg0Function */
		    {
			ArrayList list = new108();
			push(goTo(33), list);
		    }
		    break;
                    case 109: /* reduce AArg1Function */
		    {
			ArrayList list = new109();
			push(goTo(33), list);
		    }
		    break;
                    case 110: /* reduce AArg2Function */
		    {
			ArrayList list = new110();
			push(goTo(33), list);
		    }
		    break;
                    case 111: /* reduce AFirstExpression */
		    {
			ArrayList list = new111();
			push(goTo(34), list);
		    }
		    break;
                    case 112: /* reduce ASecondExpression */
		    {
			ArrayList list = new112();
			push(goTo(35), list);
		    }
		    break;
                    case 113: /* reduce AThirdExpression */
		    {
			ArrayList list = new113();
			push(goTo(36), list);
		    }
		    break;
                    case 114: /* reduce ATerminal$StartshapeDeclaration */
		    {
			ArrayList list = new114();
			push(goTo(37), list);
		    }
		    break;
                    case 115: /* reduce ANonTerminal$StartshapeDeclaration */
		    {
			ArrayList list = new115();
			push(goTo(37), list);
		    }
		    break;
                    case 116: /* reduce ATerminal$FigureDeclaration */
		    {
			ArrayList list = new116();
			push(goTo(38), list);
		    }
		    break;
                    case 117: /* reduce ANonTerminal$FigureDeclaration */
		    {
			ArrayList list = new117();
			push(goTo(38), list);
		    }
		    break;
                    case 118: /* reduce ATerminal$IncludeDeclaration */
		    {
			ArrayList list = new118();
			push(goTo(39), list);
		    }
		    break;
                    case 119: /* reduce ANonTerminal$IncludeDeclaration */
		    {
			ArrayList list = new119();
			push(goTo(39), list);
		    }
		    break;
                    case 120: /* reduce ATerminal$BackgroundAdjustment */
		    {
			ArrayList list = new120();
			push(goTo(40), list);
		    }
		    break;
                    case 121: /* reduce ANonTerminal$BackgroundAdjustment */
		    {
			ArrayList list = new121();
			push(goTo(40), list);
		    }
		    break;
                    case 122: /* reduce ATerminal$TileAdjustment */
		    {
			ArrayList list = new122();
			push(goTo(41), list);
		    }
		    break;
                    case 123: /* reduce ANonTerminal$TileAdjustment */
		    {
			ArrayList list = new123();
			push(goTo(41), list);
		    }
		    break;
                    case 124: /* reduce ATerminal$SizeAdjustment */
		    {
			ArrayList list = new124();
			push(goTo(42), list);
		    }
		    break;
                    case 125: /* reduce ANonTerminal$SizeAdjustment */
		    {
			ArrayList list = new125();
			push(goTo(42), list);
		    }
		    break;
                    case 126: /* reduce ATerminal$PathOperationDeclaration */
		    {
			ArrayList list = new126();
			push(goTo(43), list);
		    }
		    break;
                    case 127: /* reduce ANonTerminal$PathOperationDeclaration */
		    {
			ArrayList list = new127();
			push(goTo(43), list);
		    }
		    break;
                    case 128: /* reduce ATerminal$ShapeAdjustment */
		    {
			ArrayList list = new128();
			push(goTo(44), list);
		    }
		    break;
                    case 129: /* reduce ANonTerminal$ShapeAdjustment */
		    {
			ArrayList list = new129();
			push(goTo(44), list);
		    }
		    break;
                    case 130: /* reduce ATerminal$ShapeReplacementDeclaration */
		    {
			ArrayList list = new130();
			push(goTo(45), list);
		    }
		    break;
                    case 131: /* reduce ANonTerminal$ShapeReplacementDeclaration */
		    {
			ArrayList list = new131();
			push(goTo(45), list);
		    }
		    break;
                    case 132: /* reduce ATerminal$PathAdjustment */
		    {
			ArrayList list = new132();
			push(goTo(46), list);
		    }
		    break;
                    case 133: /* reduce ANonTerminal$PathAdjustment */
		    {
			ArrayList list = new133();
			push(goTo(46), list);
		    }
		    break;
                    case 134: /* reduce ATerminal$PathPoints */
		    {
			ArrayList list = new134();
			push(goTo(47), list);
		    }
		    break;
                    case 135: /* reduce ANonTerminal$PathPoints */
		    {
			ArrayList list = new135();
			push(goTo(47), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PCfdg node1 = (PCfdg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AAcfdg1Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode5 = null;
        @SuppressWarnings("unused") Object nullNode6 = null;
        @SuppressWarnings("unused") Object nullNode7 = null;
        LinkedList listNode9 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList2.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode4, null, null, null, listNode9);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AAcfdg2Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode6 = null;
        @SuppressWarnings("unused") Object nullNode7 = null;
        @SuppressWarnings("unused") Object nullNode8 = null;
        LinkedList listNode10 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList3.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode5, null, null, null, listNode10);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAcfdg3Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        PBackgroundDeclaration pbackgrounddeclarationNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        @SuppressWarnings("unused") Object nullNode7 = null;
        LinkedList listNode9 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        pbackgrounddeclarationNode5 = (PBackgroundDeclaration)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList3.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode4, pbackgrounddeclarationNode5, null, null, listNode9);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAcfdg4Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        PBackgroundDeclaration pbackgrounddeclarationNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        @SuppressWarnings("unused") Object nullNode8 = null;
        LinkedList listNode10 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pbackgrounddeclarationNode6 = (PBackgroundDeclaration)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList4.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode5, pbackgrounddeclarationNode6, null, null, listNode10);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AAcfdg5Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode5 = null;
        PTileDeclaration ptiledeclarationNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        LinkedList listNode9 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        ptiledeclarationNode6 = (PTileDeclaration)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList3.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode4, null, ptiledeclarationNode6, null, listNode9);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AAcfdg6Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode6 = null;
        PTileDeclaration ptiledeclarationNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        LinkedList listNode10 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        ptiledeclarationNode7 = (PTileDeclaration)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList4.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode5, null, ptiledeclarationNode7, null, listNode10);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AAcfdg7Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        PBackgroundDeclaration pbackgrounddeclarationNode5;
        PTileDeclaration ptiledeclarationNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        LinkedList listNode9 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        pbackgrounddeclarationNode5 = (PBackgroundDeclaration)nodeArrayList2.get(0);
        ptiledeclarationNode6 = (PTileDeclaration)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList4.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode4, pbackgrounddeclarationNode5, ptiledeclarationNode6, null, listNode9);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAcfdg8Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        PBackgroundDeclaration pbackgrounddeclarationNode6;
        PTileDeclaration ptiledeclarationNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        LinkedList listNode10 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pbackgrounddeclarationNode6 = (PBackgroundDeclaration)nodeArrayList3.get(0);
        ptiledeclarationNode7 = (PTileDeclaration)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode9 = new LinkedList();
        listNode9 = (LinkedList)nodeArrayList5.get(0);
	if(listNode9 != null)
	{
	  listNode10.addAll(listNode9);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode5, pbackgrounddeclarationNode6, ptiledeclarationNode7, null, listNode10);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AAcfdg9$Ordered1Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode5 = null;
        @SuppressWarnings("unused") Object nullNode6 = null;
        PSizeDeclaration psizedeclarationNode7;
        LinkedList listNode14 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        {
            // Block
        TSize tsizeNode8;
        TLCbkt tlcbktNode9;
        LinkedList listNode11 = new LinkedList();
        TRCbkt trcbktNode12;
        tsizeNode8 = (TSize)nodeArrayList2.get(0);
        tlcbktNode9 = (TLCbkt)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList4.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        trcbktNode12 = (TRCbkt)nodeArrayList5.get(0);

        psizedeclarationNode7 = new AOrderedSizeDeclaration(tsizeNode8, tlcbktNode9, listNode11, trcbktNode12);
        }
        {
            // Block
        LinkedList listNode13 = new LinkedList();
        listNode13 = (LinkedList)nodeArrayList6.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode4, null, null, psizedeclarationNode7, listNode14);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AAcfdg10$Ordered1Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode6 = null;
        @SuppressWarnings("unused") Object nullNode7 = null;
        PSizeDeclaration psizedeclarationNode8;
        LinkedList listNode15 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        TSize tsizeNode9;
        TLCbkt tlcbktNode10;
        LinkedList listNode12 = new LinkedList();
        TRCbkt trcbktNode13;
        tsizeNode9 = (TSize)nodeArrayList3.get(0);
        tlcbktNode10 = (TLCbkt)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode11 = new LinkedList();
        listNode11 = (LinkedList)nodeArrayList5.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        trcbktNode13 = (TRCbkt)nodeArrayList6.get(0);

        psizedeclarationNode8 = new AOrderedSizeDeclaration(tsizeNode9, tlcbktNode10, listNode12, trcbktNode13);
        }
        {
            // Block
        LinkedList listNode14 = new LinkedList();
        listNode14 = (LinkedList)nodeArrayList7.get(0);
	if(listNode14 != null)
	{
	  listNode15.addAll(listNode14);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode5, null, null, psizedeclarationNode8, listNode15);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AAcfdg11$Ordered1Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        PBackgroundDeclaration pbackgrounddeclarationNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        PSizeDeclaration psizedeclarationNode7;
        LinkedList listNode14 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        pbackgrounddeclarationNode5 = (PBackgroundDeclaration)nodeArrayList2.get(0);
        {
            // Block
        TSize tsizeNode8;
        TLCbkt tlcbktNode9;
        LinkedList listNode11 = new LinkedList();
        TRCbkt trcbktNode12;
        tsizeNode8 = (TSize)nodeArrayList3.get(0);
        tlcbktNode9 = (TLCbkt)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList5.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        trcbktNode12 = (TRCbkt)nodeArrayList6.get(0);

        psizedeclarationNode7 = new AOrderedSizeDeclaration(tsizeNode8, tlcbktNode9, listNode11, trcbktNode12);
        }
        {
            // Block
        LinkedList listNode13 = new LinkedList();
        listNode13 = (LinkedList)nodeArrayList7.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode4, pbackgrounddeclarationNode5, null, psizedeclarationNode7, listNode14);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce AAcfdg12$Ordered1Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        PBackgroundDeclaration pbackgrounddeclarationNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        PSizeDeclaration psizedeclarationNode8;
        LinkedList listNode15 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pbackgrounddeclarationNode6 = (PBackgroundDeclaration)nodeArrayList3.get(0);
        {
            // Block
        TSize tsizeNode9;
        TLCbkt tlcbktNode10;
        LinkedList listNode12 = new LinkedList();
        TRCbkt trcbktNode13;
        tsizeNode9 = (TSize)nodeArrayList4.get(0);
        tlcbktNode10 = (TLCbkt)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode11 = new LinkedList();
        listNode11 = (LinkedList)nodeArrayList6.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        trcbktNode13 = (TRCbkt)nodeArrayList7.get(0);

        psizedeclarationNode8 = new AOrderedSizeDeclaration(tsizeNode9, tlcbktNode10, listNode12, trcbktNode13);
        }
        {
            // Block
        LinkedList listNode14 = new LinkedList();
        listNode14 = (LinkedList)nodeArrayList8.get(0);
	if(listNode14 != null)
	{
	  listNode15.addAll(listNode14);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode5, pbackgrounddeclarationNode6, null, psizedeclarationNode8, listNode15);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AAcfdg13$Ordered1Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode5 = null;
        PTileDeclaration ptiledeclarationNode6;
        PSizeDeclaration psizedeclarationNode7;
        LinkedList listNode14 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        ptiledeclarationNode6 = (PTileDeclaration)nodeArrayList2.get(0);
        {
            // Block
        TSize tsizeNode8;
        TLCbkt tlcbktNode9;
        LinkedList listNode11 = new LinkedList();
        TRCbkt trcbktNode12;
        tsizeNode8 = (TSize)nodeArrayList3.get(0);
        tlcbktNode9 = (TLCbkt)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList5.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        trcbktNode12 = (TRCbkt)nodeArrayList6.get(0);

        psizedeclarationNode7 = new AOrderedSizeDeclaration(tsizeNode8, tlcbktNode9, listNode11, trcbktNode12);
        }
        {
            // Block
        LinkedList listNode13 = new LinkedList();
        listNode13 = (LinkedList)nodeArrayList7.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode4, null, ptiledeclarationNode6, psizedeclarationNode7, listNode14);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AAcfdg14$Ordered1Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        @SuppressWarnings("unused") Object nullNode6 = null;
        PTileDeclaration ptiledeclarationNode7;
        PSizeDeclaration psizedeclarationNode8;
        LinkedList listNode15 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        ptiledeclarationNode7 = (PTileDeclaration)nodeArrayList3.get(0);
        {
            // Block
        TSize tsizeNode9;
        TLCbkt tlcbktNode10;
        LinkedList listNode12 = new LinkedList();
        TRCbkt trcbktNode13;
        tsizeNode9 = (TSize)nodeArrayList4.get(0);
        tlcbktNode10 = (TLCbkt)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode11 = new LinkedList();
        listNode11 = (LinkedList)nodeArrayList6.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        trcbktNode13 = (TRCbkt)nodeArrayList7.get(0);

        psizedeclarationNode8 = new AOrderedSizeDeclaration(tsizeNode9, tlcbktNode10, listNode12, trcbktNode13);
        }
        {
            // Block
        LinkedList listNode14 = new LinkedList();
        listNode14 = (LinkedList)nodeArrayList8.get(0);
	if(listNode14 != null)
	{
	  listNode15.addAll(listNode14);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode5, null, ptiledeclarationNode7, psizedeclarationNode8, listNode15);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AAcfdg15$Ordered1Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode4 = new LinkedList();
        PBackgroundDeclaration pbackgrounddeclarationNode5;
        PTileDeclaration ptiledeclarationNode6;
        PSizeDeclaration psizedeclarationNode7;
        LinkedList listNode14 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }
        pbackgrounddeclarationNode5 = (PBackgroundDeclaration)nodeArrayList2.get(0);
        ptiledeclarationNode6 = (PTileDeclaration)nodeArrayList3.get(0);
        {
            // Block
        TSize tsizeNode8;
        TLCbkt tlcbktNode9;
        LinkedList listNode11 = new LinkedList();
        TRCbkt trcbktNode12;
        tsizeNode8 = (TSize)nodeArrayList4.get(0);
        tlcbktNode9 = (TLCbkt)nodeArrayList5.get(0);
        {
            // Block
        LinkedList listNode10 = new LinkedList();
        listNode10 = (LinkedList)nodeArrayList6.get(0);
	if(listNode10 != null)
	{
	  listNode11.addAll(listNode10);
	}
        }
        trcbktNode12 = (TRCbkt)nodeArrayList7.get(0);

        psizedeclarationNode7 = new AOrderedSizeDeclaration(tsizeNode8, tlcbktNode9, listNode11, trcbktNode12);
        }
        {
            // Block
        LinkedList listNode13 = new LinkedList();
        listNode13 = (LinkedList)nodeArrayList8.get(0);
	if(listNode13 != null)
	{
	  listNode14.addAll(listNode13);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode4, pbackgrounddeclarationNode5, ptiledeclarationNode6, psizedeclarationNode7, listNode14);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AAcfdg16$Ordered1Cfdg */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCfdg pcfdgNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        LinkedList listNode5 = new LinkedList();
        PBackgroundDeclaration pbackgrounddeclarationNode6;
        PTileDeclaration ptiledeclarationNode7;
        PSizeDeclaration psizedeclarationNode8;
        LinkedList listNode15 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pbackgrounddeclarationNode6 = (PBackgroundDeclaration)nodeArrayList3.get(0);
        ptiledeclarationNode7 = (PTileDeclaration)nodeArrayList4.get(0);
        {
            // Block
        TSize tsizeNode9;
        TLCbkt tlcbktNode10;
        LinkedList listNode12 = new LinkedList();
        TRCbkt trcbktNode13;
        tsizeNode9 = (TSize)nodeArrayList5.get(0);
        tlcbktNode10 = (TLCbkt)nodeArrayList6.get(0);
        {
            // Block
        LinkedList listNode11 = new LinkedList();
        listNode11 = (LinkedList)nodeArrayList7.get(0);
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
        trcbktNode13 = (TRCbkt)nodeArrayList8.get(0);

        psizedeclarationNode8 = new AOrderedSizeDeclaration(tsizeNode9, tlcbktNode10, listNode12, trcbktNode13);
        }
        {
            // Block
        LinkedList listNode14 = new LinkedList();
        listNode14 = (LinkedList)nodeArrayList9.get(0);
	if(listNode14 != null)
	{
	  listNode15.addAll(listNode14);
	}
        }

        pcfdgNode1 = new ACfdg(listNode3, listNode5, pbackgrounddeclarationNode6, ptiledeclarationNode7, psizedeclarationNode8, listNode15);
        }
	nodeList.add(pcfdgNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ARuleFigureDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFigureDeclaration pfiguredeclarationNode1;
        {
            // Block
        PRuleDeclaration pruledeclarationNode2;
        pruledeclarationNode2 = (PRuleDeclaration)nodeArrayList1.get(0);

        pfiguredeclarationNode1 = new ARuleFigureDeclaration(pruledeclarationNode2);
        }
	nodeList.add(pfiguredeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce APathFigureDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFigureDeclaration pfiguredeclarationNode1;
        {
            // Block
        PPathDeclaration ppathdeclarationNode2;
        ppathdeclarationNode2 = (PPathDeclaration)nodeArrayList1.get(0);

        pfiguredeclarationNode1 = new APathFigureDeclaration(ppathdeclarationNode2);
        }
	nodeList.add(pfiguredeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce AStartshapeDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStartshapeDeclaration pstartshapedeclarationNode1;
        {
            // Block
        TStartshape tstartshapeNode2;
        TString tstringNode3;
        tstartshapeNode2 = (TStartshape)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);

        pstartshapedeclarationNode1 = new AStartshapeDeclaration(tstartshapeNode2, tstringNode3);
        }
	nodeList.add(pstartshapedeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AIncludeDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PIncludeDeclaration pincludedeclarationNode1;
        {
            // Block
        TInclude tincludeNode2;
        TFilename tfilenameNode3;
        tincludeNode2 = (TInclude)nodeArrayList1.get(0);
        tfilenameNode3 = (TFilename)nodeArrayList2.get(0);

        pincludedeclarationNode1 = new AIncludeDeclaration(tincludeNode2, tfilenameNode3);
        }
	nodeList.add(pincludedeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ABackgroundDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBackgroundDeclaration pbackgrounddeclarationNode1;
        {
            // Block
        TBackground tbackgroundNode2;
        TLCbkt tlcbktNode3;
        LinkedList listNode5 = new LinkedList();
        TRCbkt trcbktNode6;
        tbackgroundNode2 = (TBackground)nodeArrayList1.get(0);
        tlcbktNode3 = (TLCbkt)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trcbktNode6 = (TRCbkt)nodeArrayList4.get(0);

        pbackgrounddeclarationNode1 = new ABackgroundDeclaration(tbackgroundNode2, tlcbktNode3, listNode5, trcbktNode6);
        }
	nodeList.add(pbackgrounddeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce ADefaultTileDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTileDeclaration ptiledeclarationNode1;
        {
            // Block
        TTile ttileNode2;
        TLCbkt tlcbktNode3;
        LinkedList listNode5 = new LinkedList();
        TRCbkt trcbktNode6;
        ttileNode2 = (TTile)nodeArrayList1.get(0);
        tlcbktNode3 = (TLCbkt)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trcbktNode6 = (TRCbkt)nodeArrayList4.get(0);

        ptiledeclarationNode1 = new ADefaultTileDeclaration(ttileNode2, tlcbktNode3, listNode5, trcbktNode6);
        }
	nodeList.add(ptiledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AOrderedTileDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTileDeclaration ptiledeclarationNode1;
        {
            // Block
        TTile ttileNode2;
        TLSbkt tlsbktNode3;
        LinkedList listNode5 = new LinkedList();
        TRSbkt trsbktNode6;
        ttileNode2 = (TTile)nodeArrayList1.get(0);
        tlsbktNode3 = (TLSbkt)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trsbktNode6 = (TRSbkt)nodeArrayList4.get(0);

        ptiledeclarationNode1 = new AOrderedTileDeclaration(ttileNode2, tlsbktNode3, listNode5, trsbktNode6);
        }
	nodeList.add(ptiledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce AAruledeclaration1RuleDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRuleDeclaration pruledeclarationNode1;
        {
            // Block
        TRule truleNode2;
        TString tstringNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        PListShapeReplacement plistshapereplacementNode5;
        truleNode2 = (TRule)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);
        plistshapereplacementNode5 = (PListShapeReplacement)nodeArrayList3.get(0);

        pruledeclarationNode1 = new ARuleDeclaration(truleNode2, tstringNode3, null, plistshapereplacementNode5);
        }
	nodeList.add(pruledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AAruledeclaration2RuleDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PRuleDeclaration pruledeclarationNode1;
        {
            // Block
        TRule truleNode2;
        TString tstringNode3;
        TNumber tnumberNode4;
        PListShapeReplacement plistshapereplacementNode5;
        truleNode2 = (TRule)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);
        tnumberNode4 = (TNumber)nodeArrayList3.get(0);
        plistshapereplacementNode5 = (PListShapeReplacement)nodeArrayList4.get(0);

        pruledeclarationNode1 = new ARuleDeclaration(truleNode2, tstringNode3, tnumberNode4, plistshapereplacementNode5);
        }
	nodeList.add(pruledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AApathdeclaration1PathDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathDeclaration ppathdeclarationNode1;
        {
            // Block
        TPath tpathNode2;
        TString tstringNode3;
        TLCbkt tlcbktNode4;
        LinkedList listNode5 = new LinkedList();
        TRCbkt trcbktNode6;
        tpathNode2 = (TPath)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);
        tlcbktNode4 = (TLCbkt)nodeArrayList3.get(0);
        {
            // Block
        }
        trcbktNode6 = (TRCbkt)nodeArrayList4.get(0);

        ppathdeclarationNode1 = new APathDeclaration(tpathNode2, tstringNode3, tlcbktNode4, listNode5, trcbktNode6);
        }
	nodeList.add(ppathdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce AApathdeclaration2PathDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathDeclaration ppathdeclarationNode1;
        {
            // Block
        TPath tpathNode2;
        TString tstringNode3;
        TLCbkt tlcbktNode4;
        LinkedList listNode6 = new LinkedList();
        TRCbkt trcbktNode7;
        tpathNode2 = (TPath)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);
        tlcbktNode4 = (TLCbkt)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trcbktNode7 = (TRCbkt)nodeArrayList5.get(0);

        ppathdeclarationNode1 = new APathDeclaration(tpathNode2, tstringNode3, tlcbktNode4, listNode6, trcbktNode7);
        }
	nodeList.add(ppathdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AMultiShapeReplacementDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PShapeReplacementDeclaration pshapereplacementdeclarationNode1;
        {
            // Block
        PMultiShapeReplacement pmultishapereplacementNode2;
        pmultishapereplacementNode2 = (PMultiShapeReplacement)nodeArrayList1.get(0);

        pshapereplacementdeclarationNode1 = new AMultiShapeReplacementDeclaration(pmultishapereplacementNode2);
        }
	nodeList.add(pshapereplacementdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ASingleShapeReplacementDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PShapeReplacementDeclaration pshapereplacementdeclarationNode1;
        {
            // Block
        PSingleShapeReplacement psingleshapereplacementNode2;
        psingleshapereplacementNode2 = (PSingleShapeReplacement)nodeArrayList1.get(0);

        pshapereplacementdeclarationNode1 = new ASingleShapeReplacementDeclaration(psingleshapereplacementNode2);
        }
	nodeList.add(pshapereplacementdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAdefaultsingleshapereplacement1SingleShapeReplacement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSingleShapeReplacement psingleshapereplacementNode1;
        {
            // Block
        TString tstringNode2;
        TLCbkt tlcbktNode3;
        LinkedList listNode4 = new LinkedList();
        TRCbkt trcbktNode5;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlcbktNode3 = (TLCbkt)nodeArrayList2.get(0);
        {
            // Block
        }
        trcbktNode5 = (TRCbkt)nodeArrayList3.get(0);

        psingleshapereplacementNode1 = new ADefaultSingleShapeReplacement(tstringNode2, tlcbktNode3, listNode4, trcbktNode5);
        }
	nodeList.add(psingleshapereplacementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAdefaultsingleshapereplacement2SingleShapeReplacement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSingleShapeReplacement psingleshapereplacementNode1;
        {
            // Block
        TString tstringNode2;
        TLCbkt tlcbktNode3;
        LinkedList listNode5 = new LinkedList();
        TRCbkt trcbktNode6;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlcbktNode3 = (TLCbkt)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trcbktNode6 = (TRCbkt)nodeArrayList4.get(0);

        psingleshapereplacementNode1 = new ADefaultSingleShapeReplacement(tstringNode2, tlcbktNode3, listNode5, trcbktNode6);
        }
	nodeList.add(psingleshapereplacementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AAorderedsingleshapereplacement1SingleShapeReplacement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSingleShapeReplacement psingleshapereplacementNode1;
        {
            // Block
        TString tstringNode2;
        TLSbkt tlsbktNode3;
        LinkedList listNode4 = new LinkedList();
        TRSbkt trsbktNode5;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlsbktNode3 = (TLSbkt)nodeArrayList2.get(0);
        {
            // Block
        }
        trsbktNode5 = (TRSbkt)nodeArrayList3.get(0);

        psingleshapereplacementNode1 = new AOrderedSingleShapeReplacement(tstringNode2, tlsbktNode3, listNode4, trsbktNode5);
        }
	nodeList.add(psingleshapereplacementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AAorderedsingleshapereplacement2SingleShapeReplacement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSingleShapeReplacement psingleshapereplacementNode1;
        {
            // Block
        TString tstringNode2;
        TLSbkt tlsbktNode3;
        LinkedList listNode5 = new LinkedList();
        TRSbkt trsbktNode6;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlsbktNode3 = (TLSbkt)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trsbktNode6 = (TRSbkt)nodeArrayList4.get(0);

        psingleshapereplacementNode1 = new AOrderedSingleShapeReplacement(tstringNode2, tlsbktNode3, listNode5, trsbktNode6);
        }
	nodeList.add(psingleshapereplacementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AListShapeReplacement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PListShapeReplacement plistshapereplacementNode1;
        {
            // Block
        TLCbkt tlcbktNode2;
        LinkedList listNode4 = new LinkedList();
        TRCbkt trcbktNode5;
        tlcbktNode2 = (TLCbkt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trcbktNode5 = (TRCbkt)nodeArrayList3.get(0);

        plistshapereplacementNode1 = new AListShapeReplacement(tlcbktNode2, listNode4, trcbktNode5);
        }
	nodeList.add(plistshapereplacementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AMultiShapeReplacement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiShapeReplacement pmultishapereplacementNode1;
        {
            // Block
        TNumber tnumberNode2;
        TStar tstarNode3;
        TLCbkt tlcbktNode4;
        LinkedList listNode6 = new LinkedList();
        TRCbkt trcbktNode7;
        PMultiShapeReplacementBody pmultishapereplacementbodyNode8;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        tlcbktNode4 = (TLCbkt)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trcbktNode7 = (TRCbkt)nodeArrayList5.get(0);
        pmultishapereplacementbodyNode8 = (PMultiShapeReplacementBody)nodeArrayList6.get(0);

        pmultishapereplacementNode1 = new AMultiShapeReplacement(tnumberNode2, tstarNode3, tlcbktNode4, listNode6, trcbktNode7, pmultishapereplacementbodyNode8);
        }
	nodeList.add(pmultishapereplacementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ASingleMultiShapeReplacementBody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiShapeReplacementBody pmultishapereplacementbodyNode1;
        {
            // Block
        PSingleShapeReplacement psingleshapereplacementNode2;
        psingleshapereplacementNode2 = (PSingleShapeReplacement)nodeArrayList1.get(0);

        pmultishapereplacementbodyNode1 = new ASingleMultiShapeReplacementBody(psingleshapereplacementNode2);
        }
	nodeList.add(pmultishapereplacementbodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AListMultiShapeReplacementBody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiShapeReplacementBody pmultishapereplacementbodyNode1;
        {
            // Block
        PListShapeReplacement plistshapereplacementNode2;
        plistshapereplacementNode2 = (PListShapeReplacement)nodeArrayList1.get(0);

        pmultishapereplacementbodyNode1 = new AListMultiShapeReplacementBody(plistshapereplacementNode2);
        }
	nodeList.add(pmultishapereplacementbodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AStarOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TStar tstarNode2;
        tstarNode2 = (TStar)nodeArrayList1.get(0);

        poperatorNode1 = new AStarOperator(tstarNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce APlusOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        poperatorNode1 = new APlusOperator(tplusNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AMinusOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        poperatorNode1 = new AMinusOperator(tminusNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ASlashOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TSlash tslashNode2;
        tslashNode2 = (TSlash)nodeArrayList1.get(0);

        poperatorNode1 = new ASlashOperator(tslashNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AArrowOperator */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TArrow tarrowNode2;
        tarrowNode2 = (TArrow)nodeArrayList1.get(0);

        poperatorNode1 = new AArrowOperator(tarrowNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AMultiPathOperationDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathOperationDeclaration ppathoperationdeclarationNode1;
        {
            // Block
        PMultiPathOperation pmultipathoperationNode2;
        pmultipathoperationNode2 = (PMultiPathOperation)nodeArrayList1.get(0);

        ppathoperationdeclarationNode1 = new AMultiPathOperationDeclaration(pmultipathoperationNode2);
        }
	nodeList.add(ppathoperationdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce APathPathOperationDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathOperationDeclaration ppathoperationdeclarationNode1;
        {
            // Block
        PPathOperation ppathoperationNode2;
        ppathoperationNode2 = (PPathOperation)nodeArrayList1.get(0);

        ppathoperationdeclarationNode1 = new APathPathOperationDeclaration(ppathoperationNode2);
        }
	nodeList.add(ppathoperationdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AAdefaultsimplepathoperation1SimplePathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimplePathOperation psimplepathoperationNode1;
        {
            // Block
        TString tstringNode2;
        TLCbkt tlcbktNode3;
        LinkedList listNode4 = new LinkedList();
        TRCbkt trcbktNode5;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlcbktNode3 = (TLCbkt)nodeArrayList2.get(0);
        {
            // Block
        }
        trcbktNode5 = (TRCbkt)nodeArrayList3.get(0);

        psimplepathoperationNode1 = new ADefaultSimplePathOperation(tstringNode2, tlcbktNode3, listNode4, trcbktNode5);
        }
	nodeList.add(psimplepathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AAdefaultsimplepathoperation2SimplePathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimplePathOperation psimplepathoperationNode1;
        {
            // Block
        TString tstringNode2;
        TLCbkt tlcbktNode3;
        LinkedList listNode5 = new LinkedList();
        TRCbkt trcbktNode6;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlcbktNode3 = (TLCbkt)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trcbktNode6 = (TRCbkt)nodeArrayList4.get(0);

        psimplepathoperationNode1 = new ADefaultSimplePathOperation(tstringNode2, tlcbktNode3, listNode5, trcbktNode6);
        }
	nodeList.add(psimplepathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce AAorderedsimplepathoperation1SimplePathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimplePathOperation psimplepathoperationNode1;
        {
            // Block
        TString tstringNode2;
        TLSbkt tlsbktNode3;
        LinkedList listNode4 = new LinkedList();
        TRSbkt trsbktNode5;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlsbktNode3 = (TLSbkt)nodeArrayList2.get(0);
        {
            // Block
        }
        trsbktNode5 = (TRSbkt)nodeArrayList3.get(0);

        psimplepathoperationNode1 = new AOrderedSimplePathOperation(tstringNode2, tlsbktNode3, listNode4, trsbktNode5);
        }
	nodeList.add(psimplepathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AAorderedsimplepathoperation2SimplePathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimplePathOperation psimplepathoperationNode1;
        {
            // Block
        TString tstringNode2;
        TLSbkt tlsbktNode3;
        LinkedList listNode5 = new LinkedList();
        TRSbkt trsbktNode6;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlsbktNode3 = (TLSbkt)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trsbktNode6 = (TRSbkt)nodeArrayList4.get(0);

        psimplepathoperationNode1 = new AOrderedSimplePathOperation(tstringNode2, tlsbktNode3, listNode5, trsbktNode6);
        }
	nodeList.add(psimplepathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AAdefaultpathoppathoperation1PathopPathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathopPathOperation ppathoppathoperationNode1;
        {
            // Block
        TPathop tpathopNode2;
        TLCbkt tlcbktNode3;
        LinkedList listNode4 = new LinkedList();
        TRCbkt trcbktNode5;
        tpathopNode2 = (TPathop)nodeArrayList1.get(0);
        tlcbktNode3 = (TLCbkt)nodeArrayList2.get(0);
        {
            // Block
        }
        trcbktNode5 = (TRCbkt)nodeArrayList3.get(0);

        ppathoppathoperationNode1 = new ADefaultPathopPathOperation(tpathopNode2, tlcbktNode3, listNode4, trcbktNode5);
        }
	nodeList.add(ppathoppathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce AAdefaultpathoppathoperation2PathopPathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathopPathOperation ppathoppathoperationNode1;
        {
            // Block
        TPathop tpathopNode2;
        TLCbkt tlcbktNode3;
        LinkedList listNode5 = new LinkedList();
        TRCbkt trcbktNode6;
        tpathopNode2 = (TPathop)nodeArrayList1.get(0);
        tlcbktNode3 = (TLCbkt)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trcbktNode6 = (TRCbkt)nodeArrayList4.get(0);

        ppathoppathoperationNode1 = new ADefaultPathopPathOperation(tpathopNode2, tlcbktNode3, listNode5, trcbktNode6);
        }
	nodeList.add(ppathoppathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AAorderedpathoppathoperation1PathopPathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathopPathOperation ppathoppathoperationNode1;
        {
            // Block
        TPathop tpathopNode2;
        TLSbkt tlsbktNode3;
        LinkedList listNode4 = new LinkedList();
        TRSbkt trsbktNode5;
        tpathopNode2 = (TPathop)nodeArrayList1.get(0);
        tlsbktNode3 = (TLSbkt)nodeArrayList2.get(0);
        {
            // Block
        }
        trsbktNode5 = (TRSbkt)nodeArrayList3.get(0);

        ppathoppathoperationNode1 = new AOrderedPathopPathOperation(tpathopNode2, tlsbktNode3, listNode4, trsbktNode5);
        }
	nodeList.add(ppathoppathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce AAorderedpathoppathoperation2PathopPathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathopPathOperation ppathoppathoperationNode1;
        {
            // Block
        TPathop tpathopNode2;
        TLSbkt tlsbktNode3;
        LinkedList listNode5 = new LinkedList();
        TRSbkt trsbktNode6;
        tpathopNode2 = (TPathop)nodeArrayList1.get(0);
        tlsbktNode3 = (TLSbkt)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trsbktNode6 = (TRSbkt)nodeArrayList4.get(0);

        ppathoppathoperationNode1 = new AOrderedPathopPathOperation(tpathopNode2, tlsbktNode3, listNode5, trsbktNode6);
        }
	nodeList.add(ppathoppathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ASimplePathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathOperation ppathoperationNode1;
        {
            // Block
        PSimplePathOperation psimplepathoperationNode2;
        psimplepathoperationNode2 = (PSimplePathOperation)nodeArrayList1.get(0);

        ppathoperationNode1 = new ASimplePathOperation(psimplepathoperationNode2);
        }
	nodeList.add(ppathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new53() /* reduce APathopPathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathOperation ppathoperationNode1;
        {
            // Block
        PPathopPathOperation ppathoppathoperationNode2;
        ppathoppathoperationNode2 = (PPathopPathOperation)nodeArrayList1.get(0);

        ppathoperationNode1 = new APathopPathOperation(ppathoppathoperationNode2);
        }
	nodeList.add(ppathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new54() /* reduce AListPathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PListPathOperation plistpathoperationNode1;
        {
            // Block
        TLCbkt tlcbktNode2;
        LinkedList listNode4 = new LinkedList();
        TRCbkt trcbktNode5;
        tlcbktNode2 = (TLCbkt)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trcbktNode5 = (TRCbkt)nodeArrayList3.get(0);

        plistpathoperationNode1 = new AListPathOperation(tlcbktNode2, listNode4, trcbktNode5);
        }
	nodeList.add(plistpathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new55() /* reduce AMultiPathOperation */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiPathOperation pmultipathoperationNode1;
        {
            // Block
        TNumber tnumberNode2;
        TStar tstarNode3;
        TLCbkt tlcbktNode4;
        LinkedList listNode6 = new LinkedList();
        TRCbkt trcbktNode7;
        PMultiPathOperationBody pmultipathoperationbodyNode8;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        tlcbktNode4 = (TLCbkt)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        trcbktNode7 = (TRCbkt)nodeArrayList5.get(0);
        pmultipathoperationbodyNode8 = (PMultiPathOperationBody)nodeArrayList6.get(0);

        pmultipathoperationNode1 = new AMultiPathOperation(tnumberNode2, tstarNode3, tlcbktNode4, listNode6, trcbktNode7, pmultipathoperationbodyNode8);
        }
	nodeList.add(pmultipathoperationNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new56() /* reduce APathMultiPathOperationBody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiPathOperationBody pmultipathoperationbodyNode1;
        {
            // Block
        PPathOperation ppathoperationNode2;
        ppathoperationNode2 = (PPathOperation)nodeArrayList1.get(0);

        pmultipathoperationbodyNode1 = new APathMultiPathOperationBody(ppathoperationNode2);
        }
	nodeList.add(pmultipathoperationbodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new57() /* reduce AListMultiPathOperationBody */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMultiPathOperationBody pmultipathoperationbodyNode1;
        {
            // Block
        PListPathOperation plistpathoperationNode2;
        plistpathoperationNode2 = (PListPathOperation)nodeArrayList1.get(0);

        pmultipathoperationbodyNode1 = new AListMultiPathOperationBody(plistpathoperationNode2);
        }
	nodeList.add(pmultipathoperationbodyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new58() /* reduce AXPathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathPoints ppathpointsNode1;
        {
            // Block
        TXToken txtokenNode2;
        PExpression pexpressionNode3;
        txtokenNode2 = (TXToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ppathpointsNode1 = new AXPathPoints(txtokenNode2, pexpressionNode3);
        }
	nodeList.add(ppathpointsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new59() /* reduce AYPathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathPoints ppathpointsNode1;
        {
            // Block
        TYToken tytokenNode2;
        PExpression pexpressionNode3;
        tytokenNode2 = (TYToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ppathpointsNode1 = new AYPathPoints(tytokenNode2, pexpressionNode3);
        }
	nodeList.add(ppathpointsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new60() /* reduce AX1PathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathPoints ppathpointsNode1;
        {
            // Block
        TX1Token tx1tokenNode2;
        PExpression pexpressionNode3;
        tx1tokenNode2 = (TX1Token)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ppathpointsNode1 = new AX1PathPoints(tx1tokenNode2, pexpressionNode3);
        }
	nodeList.add(ppathpointsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new61() /* reduce AY1PathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathPoints ppathpointsNode1;
        {
            // Block
        TY1Token ty1tokenNode2;
        PExpression pexpressionNode3;
        ty1tokenNode2 = (TY1Token)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ppathpointsNode1 = new AY1PathPoints(ty1tokenNode2, pexpressionNode3);
        }
	nodeList.add(ppathpointsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new62() /* reduce AX2PathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathPoints ppathpointsNode1;
        {
            // Block
        TX2Token tx2tokenNode2;
        PExpression pexpressionNode3;
        tx2tokenNode2 = (TX2Token)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ppathpointsNode1 = new AX2PathPoints(tx2tokenNode2, pexpressionNode3);
        }
	nodeList.add(ppathpointsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new63() /* reduce AY2PathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathPoints ppathpointsNode1;
        {
            // Block
        TY2Token ty2tokenNode2;
        PExpression pexpressionNode3;
        ty2tokenNode2 = (TY2Token)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ppathpointsNode1 = new AY2PathPoints(ty2tokenNode2, pexpressionNode3);
        }
	nodeList.add(ppathpointsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new64() /* reduce ARxPathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathPoints ppathpointsNode1;
        {
            // Block
        TRxToken trxtokenNode2;
        PExpression pexpressionNode3;
        trxtokenNode2 = (TRxToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ppathpointsNode1 = new ARxPathPoints(trxtokenNode2, pexpressionNode3);
        }
	nodeList.add(ppathpointsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new65() /* reduce ARyPathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathPoints ppathpointsNode1;
        {
            // Block
        TRyToken trytokenNode2;
        PExpression pexpressionNode3;
        trytokenNode2 = (TRyToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ppathpointsNode1 = new ARyPathPoints(trytokenNode2, pexpressionNode3);
        }
	nodeList.add(ppathpointsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new66() /* reduce ARotatePathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathPoints ppathpointsNode1;
        {
            // Block
        TRotateToken trotatetokenNode2;
        PExpression pexpressionNode3;
        trotatetokenNode2 = (TRotateToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ppathpointsNode1 = new ARotatePathPoints(trotatetokenNode2, pexpressionNode3);
        }
	nodeList.add(ppathpointsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new67() /* reduce AParametersPathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathPoints ppathpointsNode1;
        {
            // Block
        TParametersToken tparameterstokenNode2;
        TString tstringNode3;
        tparameterstokenNode2 = (TParametersToken)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);

        ppathpointsNode1 = new AParametersPathPoints(tparameterstokenNode2, tstringNode3);
        }
	nodeList.add(ppathpointsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new68() /* reduce AColorPathAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathAdjustment ppathadjustmentNode1;
        {
            // Block
        PColorAdjustment pcoloradjustmentNode2;
        pcoloradjustmentNode2 = (PColorAdjustment)nodeArrayList1.get(0);

        ppathadjustmentNode1 = new AColorPathAdjustment(pcoloradjustmentNode2);
        }
	nodeList.add(ppathadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new69() /* reduce AGeometryPathAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathAdjustment ppathadjustmentNode1;
        {
            // Block
        PGeometryAdjustment pgeometryadjustmentNode2;
        pgeometryadjustmentNode2 = (PGeometryAdjustment)nodeArrayList1.get(0);

        ppathadjustmentNode1 = new AGeometryPathAdjustment(pgeometryadjustmentNode2);
        }
	nodeList.add(ppathadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new70() /* reduce AStrokePathAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathAdjustment ppathadjustmentNode1;
        {
            // Block
        TStrokewidthToken tstrokewidthtokenNode2;
        PExpression pexpressionNode3;
        tstrokewidthtokenNode2 = (TStrokewidthToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ppathadjustmentNode1 = new AStrokePathAdjustment(tstrokewidthtokenNode2, pexpressionNode3);
        }
	nodeList.add(ppathadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new71() /* reduce AParametersPathAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PPathAdjustment ppathadjustmentNode1;
        {
            // Block
        TParametersToken tparameterstokenNode2;
        TString tstringNode3;
        tparameterstokenNode2 = (TParametersToken)nodeArrayList1.get(0);
        tstringNode3 = (TString)nodeArrayList2.get(0);

        ppathadjustmentNode1 = new AParametersPathAdjustment(tparameterstokenNode2, tstringNode3);
        }
	nodeList.add(ppathadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new72() /* reduce ABackgroundAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBackgroundAdjustment pbackgroundadjustmentNode1;
        {
            // Block
        PSimpleColorAdjustment psimplecoloradjustmentNode2;
        psimplecoloradjustmentNode2 = (PSimpleColorAdjustment)nodeArrayList1.get(0);

        pbackgroundadjustmentNode1 = new ABackgroundAdjustment(psimplecoloradjustmentNode2);
        }
	nodeList.add(pbackgroundadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new73() /* reduce AAtileadjustment1TileAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTileAdjustment ptileadjustmentNode1;
        {
            // Block
        TSizeToken tsizetokenNode2;
        PFirstExpression pfirstexpressionNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tsizetokenNode2 = (TSizeToken)nodeArrayList1.get(0);
        pfirstexpressionNode3 = (PFirstExpression)nodeArrayList2.get(0);

        ptileadjustmentNode1 = new ATileAdjustment(tsizetokenNode2, pfirstexpressionNode3, null);
        }
	nodeList.add(ptileadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new74() /* reduce AAtileadjustment2TileAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTileAdjustment ptileadjustmentNode1;
        {
            // Block
        TSizeToken tsizetokenNode2;
        PFirstExpression pfirstexpressionNode3;
        PSecondExpression psecondexpressionNode4;
        tsizetokenNode2 = (TSizeToken)nodeArrayList1.get(0);
        pfirstexpressionNode3 = (PFirstExpression)nodeArrayList2.get(0);
        psecondexpressionNode4 = (PSecondExpression)nodeArrayList3.get(0);

        ptileadjustmentNode1 = new ATileAdjustment(tsizetokenNode2, pfirstexpressionNode3, psecondexpressionNode4);
        }
	nodeList.add(ptileadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new75() /* reduce AXSizeAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSizeAdjustment psizeadjustmentNode1;
        {
            // Block
        TXToken txtokenNode2;
        PExpression pexpressionNode3;
        txtokenNode2 = (TXToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        psizeadjustmentNode1 = new AXSizeAdjustment(txtokenNode2, pexpressionNode3);
        }
	nodeList.add(psizeadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new76() /* reduce AYSizeAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSizeAdjustment psizeadjustmentNode1;
        {
            // Block
        TYToken tytokenNode2;
        PExpression pexpressionNode3;
        tytokenNode2 = (TYToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        psizeadjustmentNode1 = new AYSizeAdjustment(tytokenNode2, pexpressionNode3);
        }
	nodeList.add(psizeadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new77() /* reduce ASizeSizeAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSizeAdjustment psizeadjustmentNode1;
        {
            // Block
        TSizeToken tsizetokenNode2;
        PFirstExpression pfirstexpressionNode3;
        PSecondExpression psecondexpressionNode4;
        tsizetokenNode2 = (TSizeToken)nodeArrayList1.get(0);
        pfirstexpressionNode3 = (PFirstExpression)nodeArrayList2.get(0);
        psecondexpressionNode4 = (PSecondExpression)nodeArrayList3.get(0);

        psizeadjustmentNode1 = new ASizeSizeAdjustment(tsizetokenNode2, pfirstexpressionNode3, psecondexpressionNode4);
        }
	nodeList.add(psizeadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new78() /* reduce AColorShapeAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PShapeAdjustment pshapeadjustmentNode1;
        {
            // Block
        PColorAdjustment pcoloradjustmentNode2;
        pcoloradjustmentNode2 = (PColorAdjustment)nodeArrayList1.get(0);

        pshapeadjustmentNode1 = new AColorShapeAdjustment(pcoloradjustmentNode2);
        }
	nodeList.add(pshapeadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new79() /* reduce AGeometryShapeAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PShapeAdjustment pshapeadjustmentNode1;
        {
            // Block
        PGeometryAdjustment pgeometryadjustmentNode2;
        pgeometryadjustmentNode2 = (PGeometryAdjustment)nodeArrayList1.get(0);

        pshapeadjustmentNode1 = new AGeometryShapeAdjustment(pgeometryadjustmentNode2);
        }
	nodeList.add(pshapeadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new80() /* reduce AZShapeAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PShapeAdjustment pshapeadjustmentNode1;
        {
            // Block
        TZToken tztokenNode2;
        PExpression pexpressionNode3;
        tztokenNode2 = (TZToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pshapeadjustmentNode1 = new AZShapeAdjustment(tztokenNode2, pexpressionNode3);
        }
	nodeList.add(pshapeadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new81() /* reduce ASize3ShapeAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PShapeAdjustment pshapeadjustmentNode1;
        {
            // Block
        TSizeToken tsizetokenNode2;
        PFirstExpression pfirstexpressionNode3;
        PSecondExpression psecondexpressionNode4;
        PThirdExpression pthirdexpressionNode5;
        tsizetokenNode2 = (TSizeToken)nodeArrayList1.get(0);
        pfirstexpressionNode3 = (PFirstExpression)nodeArrayList2.get(0);
        psecondexpressionNode4 = (PSecondExpression)nodeArrayList3.get(0);
        pthirdexpressionNode5 = (PThirdExpression)nodeArrayList4.get(0);

        pshapeadjustmentNode1 = new ASize3ShapeAdjustment(tsizetokenNode2, pfirstexpressionNode3, psecondexpressionNode4, pthirdexpressionNode5);
        }
	nodeList.add(pshapeadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new82() /* reduce ASimpleColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PColorAdjustment pcoloradjustmentNode1;
        {
            // Block
        PSimpleColorAdjustment psimplecoloradjustmentNode2;
        psimplecoloradjustmentNode2 = (PSimpleColorAdjustment)nodeArrayList1.get(0);

        pcoloradjustmentNode1 = new ASimpleColorAdjustment(psimplecoloradjustmentNode2);
        }
	nodeList.add(pcoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new83() /* reduce ATargetColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PColorAdjustment pcoloradjustmentNode1;
        {
            // Block
        PTargetColorAdjustment ptargetcoloradjustmentNode2;
        ptargetcoloradjustmentNode2 = (PTargetColorAdjustment)nodeArrayList1.get(0);

        pcoloradjustmentNode1 = new ATargetColorAdjustment(ptargetcoloradjustmentNode2);
        }
	nodeList.add(pcoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new84() /* reduce AHueSimpleColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleColorAdjustment psimplecoloradjustmentNode1;
        {
            // Block
        THueToken thuetokenNode2;
        PExpression pexpressionNode3;
        thuetokenNode2 = (THueToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        psimplecoloradjustmentNode1 = new AHueSimpleColorAdjustment(thuetokenNode2, pexpressionNode3);
        }
	nodeList.add(psimplecoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new85() /* reduce ABrightnessSimpleColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleColorAdjustment psimplecoloradjustmentNode1;
        {
            // Block
        TBrightnessToken tbrightnesstokenNode2;
        PExpression pexpressionNode3;
        tbrightnesstokenNode2 = (TBrightnessToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        psimplecoloradjustmentNode1 = new ABrightnessSimpleColorAdjustment(tbrightnesstokenNode2, pexpressionNode3);
        }
	nodeList.add(psimplecoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new86() /* reduce ASaturationSimpleColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleColorAdjustment psimplecoloradjustmentNode1;
        {
            // Block
        TSaturationToken tsaturationtokenNode2;
        PExpression pexpressionNode3;
        tsaturationtokenNode2 = (TSaturationToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        psimplecoloradjustmentNode1 = new ASaturationSimpleColorAdjustment(tsaturationtokenNode2, pexpressionNode3);
        }
	nodeList.add(psimplecoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new87() /* reduce AAalphasimplecoloradjustment1SimpleColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleColorAdjustment psimplecoloradjustmentNode1;
        {
            // Block
        TAlphaToken talphatokenNode2;
        PExpression pexpressionNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        talphatokenNode2 = (TAlphaToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        psimplecoloradjustmentNode1 = new AAlphaSimpleColorAdjustment(talphatokenNode2, pexpressionNode3, null);
        }
	nodeList.add(psimplecoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new88() /* reduce AAalphasimplecoloradjustment2SimpleColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSimpleColorAdjustment psimplecoloradjustmentNode1;
        {
            // Block
        TAlphaToken talphatokenNode2;
        PExpression pexpressionNode3;
        TBar tbarNode4;
        talphatokenNode2 = (TAlphaToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tbarNode4 = (TBar)nodeArrayList3.get(0);

        psimplecoloradjustmentNode1 = new AAlphaSimpleColorAdjustment(talphatokenNode2, pexpressionNode3, tbarNode4);
        }
	nodeList.add(psimplecoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new89() /* reduce AHueTargetColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTargetColorAdjustment ptargetcoloradjustmentNode1;
        {
            // Block
        TTargetHueToken ttargethuetokenNode2;
        PExpression pexpressionNode3;
        ttargethuetokenNode2 = (TTargetHueToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ptargetcoloradjustmentNode1 = new AHueTargetColorAdjustment(ttargethuetokenNode2, pexpressionNode3);
        }
	nodeList.add(ptargetcoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new90() /* reduce ABrightnessTargetColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTargetColorAdjustment ptargetcoloradjustmentNode1;
        {
            // Block
        TTargetBrightnessToken ttargetbrightnesstokenNode2;
        PExpression pexpressionNode3;
        ttargetbrightnesstokenNode2 = (TTargetBrightnessToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ptargetcoloradjustmentNode1 = new ABrightnessTargetColorAdjustment(ttargetbrightnesstokenNode2, pexpressionNode3);
        }
	nodeList.add(ptargetcoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new91() /* reduce ASaturationTargetColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTargetColorAdjustment ptargetcoloradjustmentNode1;
        {
            // Block
        TTargetSaturationToken ttargetsaturationtokenNode2;
        PExpression pexpressionNode3;
        ttargetsaturationtokenNode2 = (TTargetSaturationToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ptargetcoloradjustmentNode1 = new ASaturationTargetColorAdjustment(ttargetsaturationtokenNode2, pexpressionNode3);
        }
	nodeList.add(ptargetcoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new92() /* reduce AAalphatargetcoloradjustment1TargetColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTargetColorAdjustment ptargetcoloradjustmentNode1;
        {
            // Block
        TTargetAlphaToken ttargetalphatokenNode2;
        PExpression pexpressionNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        ttargetalphatokenNode2 = (TTargetAlphaToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        ptargetcoloradjustmentNode1 = new AAlphaTargetColorAdjustment(ttargetalphatokenNode2, pexpressionNode3, null);
        }
	nodeList.add(ptargetcoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new93() /* reduce AAalphatargetcoloradjustment2TargetColorAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PTargetColorAdjustment ptargetcoloradjustmentNode1;
        {
            // Block
        TTargetAlphaToken ttargetalphatokenNode2;
        PExpression pexpressionNode3;
        TBar tbarNode4;
        ttargetalphatokenNode2 = (TTargetAlphaToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tbarNode4 = (TBar)nodeArrayList3.get(0);

        ptargetcoloradjustmentNode1 = new AAlphaTargetColorAdjustment(ttargetalphatokenNode2, pexpressionNode3, tbarNode4);
        }
	nodeList.add(ptargetcoloradjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new94() /* reduce AXGeometryAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeometryAdjustment pgeometryadjustmentNode1;
        {
            // Block
        TXToken txtokenNode2;
        PExpression pexpressionNode3;
        txtokenNode2 = (TXToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pgeometryadjustmentNode1 = new AXGeometryAdjustment(txtokenNode2, pexpressionNode3);
        }
	nodeList.add(pgeometryadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new95() /* reduce AYGeometryAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeometryAdjustment pgeometryadjustmentNode1;
        {
            // Block
        TYToken tytokenNode2;
        PExpression pexpressionNode3;
        tytokenNode2 = (TYToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pgeometryadjustmentNode1 = new AYGeometryAdjustment(tytokenNode2, pexpressionNode3);
        }
	nodeList.add(pgeometryadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new96() /* reduce ASizeGeometryAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeometryAdjustment pgeometryadjustmentNode1;
        {
            // Block
        TSizeToken tsizetokenNode2;
        PExpression pexpressionNode3;
        tsizetokenNode2 = (TSizeToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pgeometryadjustmentNode1 = new ASizeGeometryAdjustment(tsizetokenNode2, pexpressionNode3);
        }
	nodeList.add(pgeometryadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new97() /* reduce ASize2GeometryAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeometryAdjustment pgeometryadjustmentNode1;
        {
            // Block
        TSizeToken tsizetokenNode2;
        PFirstExpression pfirstexpressionNode3;
        PSecondExpression psecondexpressionNode4;
        tsizetokenNode2 = (TSizeToken)nodeArrayList1.get(0);
        pfirstexpressionNode3 = (PFirstExpression)nodeArrayList2.get(0);
        psecondexpressionNode4 = (PSecondExpression)nodeArrayList3.get(0);

        pgeometryadjustmentNode1 = new ASize2GeometryAdjustment(tsizetokenNode2, pfirstexpressionNode3, psecondexpressionNode4);
        }
	nodeList.add(pgeometryadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new98() /* reduce AFlipGeometryAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeometryAdjustment pgeometryadjustmentNode1;
        {
            // Block
        TFlipToken tfliptokenNode2;
        PExpression pexpressionNode3;
        tfliptokenNode2 = (TFlipToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pgeometryadjustmentNode1 = new AFlipGeometryAdjustment(tfliptokenNode2, pexpressionNode3);
        }
	nodeList.add(pgeometryadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new99() /* reduce ASkewGeometryAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeometryAdjustment pgeometryadjustmentNode1;
        {
            // Block
        TSkewToken tskewtokenNode2;
        PFirstExpression pfirstexpressionNode3;
        PSecondExpression psecondexpressionNode4;
        tskewtokenNode2 = (TSkewToken)nodeArrayList1.get(0);
        pfirstexpressionNode3 = (PFirstExpression)nodeArrayList2.get(0);
        psecondexpressionNode4 = (PSecondExpression)nodeArrayList3.get(0);

        pgeometryadjustmentNode1 = new ASkewGeometryAdjustment(tskewtokenNode2, pfirstexpressionNode3, psecondexpressionNode4);
        }
	nodeList.add(pgeometryadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new100() /* reduce ARotateGeometryAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PGeometryAdjustment pgeometryadjustmentNode1;
        {
            // Block
        TRotateToken trotatetokenNode2;
        PExpression pexpressionNode3;
        trotatetokenNode2 = (TRotateToken)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);

        pgeometryadjustmentNode1 = new ARotateGeometryAdjustment(trotatetokenNode2, pexpressionNode3);
        }
	nodeList.add(pgeometryadjustmentNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new101() /* reduce ANumberExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpressionNode1 = new ANumberExpression(tnumberNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new102() /* reduce ANestedExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TLRbkt tlrbktNode2;
        PExpression2 pexpression2Node3;
        TRRbkt trrbktNode4;
        tlrbktNode2 = (TLRbkt)nodeArrayList1.get(0);
        pexpression2Node3 = (PExpression2)nodeArrayList2.get(0);
        trrbktNode4 = (TRRbkt)nodeArrayList3.get(0);

        pexpressionNode1 = new ANestedExpression(tlrbktNode2, pexpression2Node3, trrbktNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new103() /* reduce AFunctionExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pexpressionNode1 = new AFunctionExpression(pfunctionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new104() /* reduce ANumberExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpression2Node1 = new ANumberExpression2(tnumberNode2);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new105() /* reduce AFunctionExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pexpression2Node1 = new AFunctionExpression2(pfunctionNode2);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new106() /* reduce ANestedExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        TLRbkt tlrbktNode2;
        PExpression2 pexpression2Node3;
        TRRbkt trrbktNode4;
        tlrbktNode2 = (TLRbkt)nodeArrayList1.get(0);
        pexpression2Node3 = (PExpression2)nodeArrayList2.get(0);
        trrbktNode4 = (TRRbkt)nodeArrayList3.get(0);

        pexpression2Node1 = new ANestedExpression2(tlrbktNode2, pexpression2Node3, trrbktNode4);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new107() /* reduce AComposedExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression2 pexpression2Node2;
        POperator poperatorNode3;
        PExpression pexpressionNode4;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);
        poperatorNode3 = (POperator)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        pexpression2Node1 = new AComposedExpression2(pexpression2Node2, poperatorNode3, pexpressionNode4);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new108() /* reduce AArg0Function */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TString tstringNode2;
        TLRbkt tlrbktNode3;
        TRRbkt trrbktNode4;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlrbktNode3 = (TLRbkt)nodeArrayList2.get(0);
        trrbktNode4 = (TRRbkt)nodeArrayList3.get(0);

        pfunctionNode1 = new AArg0Function(tstringNode2, tlrbktNode3, trrbktNode4);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new109() /* reduce AArg1Function */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TString tstringNode2;
        TLRbkt tlrbktNode3;
        PFirstExpression pfirstexpressionNode4;
        TRRbkt trrbktNode5;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlrbktNode3 = (TLRbkt)nodeArrayList2.get(0);
        pfirstexpressionNode4 = (PFirstExpression)nodeArrayList3.get(0);
        trrbktNode5 = (TRRbkt)nodeArrayList4.get(0);

        pfunctionNode1 = new AArg1Function(tstringNode2, tlrbktNode3, pfirstexpressionNode4, trrbktNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new110() /* reduce AArg2Function */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        TString tstringNode2;
        TLRbkt tlrbktNode3;
        PFirstExpression pfirstexpressionNode4;
        TComma tcommaNode5;
        PSecondExpression psecondexpressionNode6;
        TRRbkt trrbktNode7;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tlrbktNode3 = (TLRbkt)nodeArrayList2.get(0);
        pfirstexpressionNode4 = (PFirstExpression)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        psecondexpressionNode6 = (PSecondExpression)nodeArrayList5.get(0);
        trrbktNode7 = (TRRbkt)nodeArrayList6.get(0);

        pfunctionNode1 = new AArg2Function(tstringNode2, tlrbktNode3, pfirstexpressionNode4, tcommaNode5, psecondexpressionNode6, trrbktNode7);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new111() /* reduce AFirstExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFirstExpression pfirstexpressionNode1;
        {
            // Block
        PExpression2 pexpression2Node2;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);

        pfirstexpressionNode1 = new AFirstExpression(pexpression2Node2);
        }
	nodeList.add(pfirstexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new112() /* reduce ASecondExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PSecondExpression psecondexpressionNode1;
        {
            // Block
        PExpression2 pexpression2Node2;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);

        psecondexpressionNode1 = new ASecondExpression(pexpression2Node2);
        }
	nodeList.add(psecondexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new113() /* reduce AThirdExpression */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PThirdExpression pthirdexpressionNode1;
        {
            // Block
        PExpression2 pexpression2Node2;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);

        pthirdexpressionNode1 = new AThirdExpression(pexpression2Node2);
        }
	nodeList.add(pthirdexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new114() /* reduce ATerminal$StartshapeDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PStartshapeDeclaration pstartshapedeclarationNode1;
        pstartshapedeclarationNode1 = (PStartshapeDeclaration)nodeArrayList1.get(0);
	if(pstartshapedeclarationNode1 != null)
	{
	  listNode2.add(pstartshapedeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new115() /* reduce ANonTerminal$StartshapeDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PStartshapeDeclaration pstartshapedeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstartshapedeclarationNode2 = (PStartshapeDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstartshapedeclarationNode2 != null)
	{
	  listNode3.add(pstartshapedeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new116() /* reduce ATerminal$FigureDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PFigureDeclaration pfiguredeclarationNode1;
        pfiguredeclarationNode1 = (PFigureDeclaration)nodeArrayList1.get(0);
	if(pfiguredeclarationNode1 != null)
	{
	  listNode2.add(pfiguredeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new117() /* reduce ANonTerminal$FigureDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PFigureDeclaration pfiguredeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfiguredeclarationNode2 = (PFigureDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfiguredeclarationNode2 != null)
	{
	  listNode3.add(pfiguredeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new118() /* reduce ATerminal$IncludeDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PIncludeDeclaration pincludedeclarationNode1;
        pincludedeclarationNode1 = (PIncludeDeclaration)nodeArrayList1.get(0);
	if(pincludedeclarationNode1 != null)
	{
	  listNode2.add(pincludedeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new119() /* reduce ANonTerminal$IncludeDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PIncludeDeclaration pincludedeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pincludedeclarationNode2 = (PIncludeDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pincludedeclarationNode2 != null)
	{
	  listNode3.add(pincludedeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new120() /* reduce ATerminal$BackgroundAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PBackgroundAdjustment pbackgroundadjustmentNode1;
        pbackgroundadjustmentNode1 = (PBackgroundAdjustment)nodeArrayList1.get(0);
	if(pbackgroundadjustmentNode1 != null)
	{
	  listNode2.add(pbackgroundadjustmentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new121() /* reduce ANonTerminal$BackgroundAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PBackgroundAdjustment pbackgroundadjustmentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbackgroundadjustmentNode2 = (PBackgroundAdjustment)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbackgroundadjustmentNode2 != null)
	{
	  listNode3.add(pbackgroundadjustmentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new122() /* reduce ATerminal$TileAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PTileAdjustment ptileadjustmentNode1;
        ptileadjustmentNode1 = (PTileAdjustment)nodeArrayList1.get(0);
	if(ptileadjustmentNode1 != null)
	{
	  listNode2.add(ptileadjustmentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new123() /* reduce ANonTerminal$TileAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PTileAdjustment ptileadjustmentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ptileadjustmentNode2 = (PTileAdjustment)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ptileadjustmentNode2 != null)
	{
	  listNode3.add(ptileadjustmentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new124() /* reduce ATerminal$SizeAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PSizeAdjustment psizeadjustmentNode1;
        psizeadjustmentNode1 = (PSizeAdjustment)nodeArrayList1.get(0);
	if(psizeadjustmentNode1 != null)
	{
	  listNode2.add(psizeadjustmentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new125() /* reduce ANonTerminal$SizeAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PSizeAdjustment psizeadjustmentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psizeadjustmentNode2 = (PSizeAdjustment)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psizeadjustmentNode2 != null)
	{
	  listNode3.add(psizeadjustmentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new126() /* reduce ATerminal$PathOperationDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PPathOperationDeclaration ppathoperationdeclarationNode1;
        ppathoperationdeclarationNode1 = (PPathOperationDeclaration)nodeArrayList1.get(0);
	if(ppathoperationdeclarationNode1 != null)
	{
	  listNode2.add(ppathoperationdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new127() /* reduce ANonTerminal$PathOperationDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PPathOperationDeclaration ppathoperationdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppathoperationdeclarationNode2 = (PPathOperationDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppathoperationdeclarationNode2 != null)
	{
	  listNode3.add(ppathoperationdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new128() /* reduce ATerminal$ShapeAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PShapeAdjustment pshapeadjustmentNode1;
        pshapeadjustmentNode1 = (PShapeAdjustment)nodeArrayList1.get(0);
	if(pshapeadjustmentNode1 != null)
	{
	  listNode2.add(pshapeadjustmentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new129() /* reduce ANonTerminal$ShapeAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PShapeAdjustment pshapeadjustmentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pshapeadjustmentNode2 = (PShapeAdjustment)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pshapeadjustmentNode2 != null)
	{
	  listNode3.add(pshapeadjustmentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new130() /* reduce ATerminal$ShapeReplacementDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PShapeReplacementDeclaration pshapereplacementdeclarationNode1;
        pshapereplacementdeclarationNode1 = (PShapeReplacementDeclaration)nodeArrayList1.get(0);
	if(pshapereplacementdeclarationNode1 != null)
	{
	  listNode2.add(pshapereplacementdeclarationNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new131() /* reduce ANonTerminal$ShapeReplacementDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PShapeReplacementDeclaration pshapereplacementdeclarationNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pshapereplacementdeclarationNode2 = (PShapeReplacementDeclaration)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pshapereplacementdeclarationNode2 != null)
	{
	  listNode3.add(pshapereplacementdeclarationNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new132() /* reduce ATerminal$PathAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PPathAdjustment ppathadjustmentNode1;
        ppathadjustmentNode1 = (PPathAdjustment)nodeArrayList1.get(0);
	if(ppathadjustmentNode1 != null)
	{
	  listNode2.add(ppathadjustmentNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new133() /* reduce ANonTerminal$PathAdjustment */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PPathAdjustment ppathadjustmentNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppathadjustmentNode2 = (PPathAdjustment)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppathadjustmentNode2 != null)
	{
	  listNode3.add(ppathadjustmentNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new134() /* reduce ATerminal$PathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PPathPoints ppathpointsNode1;
        ppathpointsNode1 = (PPathPoints)nodeArrayList1.get(0);
	if(ppathpointsNode1 != null)
	{
	  listNode2.add(ppathpointsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new135() /* reduce ANonTerminal$PathPoints */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PPathPoints ppathpointsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ppathpointsNode2 = (PPathPoints)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ppathpointsNode2 != null)
	{
	  listNode3.add(ppathpointsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {13, SHIFT, 1}, },
			{{-1, ERROR, 1}, {46, SHIFT, 5}, },
			{{-1, ERROR, 2}, {48, ACCEPT, -1}, },
			{{-1, REDUCE, 114}, },
			{{-1, ERROR, 4}, {13, SHIFT, 1}, {14, SHIFT, 6}, {15, SHIFT, 7}, {16, SHIFT, 8}, {17, SHIFT, 9}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 6}, {7, SHIFT, 21}, },
			{{-1, ERROR, 7}, {45, SHIFT, 22}, },
			{{-1, ERROR, 8}, {7, SHIFT, 23}, {11, SHIFT, 24}, },
			{{-1, ERROR, 9}, {7, SHIFT, 25}, },
			{{-1, ERROR, 10}, {46, SHIFT, 26}, },
			{{-1, ERROR, 11}, {46, SHIFT, 27}, },
			{{-1, REDUCE, 116}, },
			{{-1, REDUCE, 115}, },
			{{-1, REDUCE, 118}, },
			{{-1, ERROR, 15}, {16, SHIFT, 8}, {17, SHIFT, 28}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 16}, {17, SHIFT, 31}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 0}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 20}, {14, SHIFT, 6}, {15, SHIFT, 7}, {16, SHIFT, 8}, {17, SHIFT, 34}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 21}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 23}, {22, SHIFT, 46}, },
			{{-1, ERROR, 24}, {22, SHIFT, 46}, },
			{{-1, ERROR, 25}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 26}, {7, SHIFT, 55}, {47, SHIFT, 56}, },
			{{-1, ERROR, 27}, {7, SHIFT, 58}, },
			{{-1, ERROR, 28}, {7, SHIFT, 59}, },
			{{-1, ERROR, 29}, {17, SHIFT, 60}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 2}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 31}, {7, SHIFT, 62}, },
			{{-1, REDUCE, 4}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 117}, },
			{{-1, ERROR, 34}, {7, SHIFT, 63}, },
			{{-1, REDUCE, 119}, },
			{{-1, ERROR, 36}, {16, SHIFT, 8}, {17, SHIFT, 64}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 37}, {17, SHIFT, 67}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 1}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 39}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 40}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 41}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 42}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, REDUCE, 120}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 45}, {8, SHIFT, 77}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, },
			{{-1, ERROR, 46}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 122}, },
			{{-1, ERROR, 48}, {8, SHIFT, 84}, {22, SHIFT, 46}, },
			{{-1, ERROR, 49}, {12, SHIFT, 86}, {22, SHIFT, 46}, },
			{{-1, ERROR, 50}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, ERROR, 51}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 52}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, REDUCE, 124}, },
			{{-1, ERROR, 54}, {8, SHIFT, 90}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 55}, {46, SHIFT, 92}, {47, SHIFT, 93}, },
			{{-1, ERROR, 56}, {7, SHIFT, 55}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 58}, {8, SHIFT, 99}, {44, SHIFT, 100}, {46, SHIFT, 101}, {47, SHIFT, 102}, },
			{{-1, ERROR, 59}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 60}, {7, SHIFT, 110}, },
			{{-1, REDUCE, 6}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 62}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 63}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 64}, {7, SHIFT, 113}, },
			{{-1, ERROR, 65}, {17, SHIFT, 114}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 3}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 67}, {7, SHIFT, 116}, },
			{{-1, REDUCE, 5}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 69}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, ERROR, 70}, {9, SHIFT, 118}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 87}, {0, SHIFT, 119}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 121}, },
			{{-1, ERROR, 79}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 111}, {1, SHIFT, 121}, {2, SHIFT, 122}, {3, SHIFT, 123}, {4, SHIFT, 124}, {5, SHIFT, 125}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 73}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 87}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, ERROR, 90}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 125}, },
			{{-1, ERROR, 92}, {7, SHIFT, 131}, {11, SHIFT, 132}, },
			{{-1, ERROR, 93}, {1, SHIFT, 133}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 97}, {8, SHIFT, 134}, {46, SHIFT, 92}, {47, SHIFT, 93}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 100}, {7, SHIFT, 136}, {11, SHIFT, 137}, },
			{{-1, ERROR, 101}, {7, SHIFT, 138}, {11, SHIFT, 139}, },
			{{-1, ERROR, 102}, {1, SHIFT, 140}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 108}, {8, SHIFT, 141}, {44, SHIFT, 100}, {46, SHIFT, 101}, {47, SHIFT, 102}, },
			{{-1, ERROR, 109}, {8, SHIFT, 143}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 110}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 111}, {8, SHIFT, 145}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 112}, {8, SHIFT, 146}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 113}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 114}, {7, SHIFT, 148}, },
			{{-1, REDUCE, 7}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 116}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 117}, {1, SHIFT, 121}, {2, SHIFT, 122}, {3, SHIFT, 123}, {4, SHIFT, 124}, {5, SHIFT, 125}, {10, SHIFT, 150}, },
			{{-1, ERROR, 118}, {9, SHIFT, 79}, {10, SHIFT, 151}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 120}, {1, SHIFT, 121}, {2, SHIFT, 122}, {3, SHIFT, 123}, {4, SHIFT, 124}, {5, SHIFT, 125}, {10, SHIFT, 153}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 126}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, REDUCE, 112}, {1, SHIFT, 121}, {2, SHIFT, 122}, {3, SHIFT, 123}, {4, SHIFT, 124}, {5, SHIFT, 125}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 8}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 131}, {8, SHIFT, 155}, {22, SHIFT, 156}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {33, SHIFT, 163}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, },
			{{-1, ERROR, 132}, {12, SHIFT, 173}, {22, SHIFT, 156}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {33, SHIFT, 163}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, },
			{{-1, ERROR, 133}, {7, SHIFT, 175}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 131}, },
			{{-1, ERROR, 136}, {8, SHIFT, 176}, {21, SHIFT, 177}, {31, SHIFT, 178}, {32, SHIFT, 179}, {34, SHIFT, 180}, {35, SHIFT, 181}, {36, SHIFT, 182}, {37, SHIFT, 183}, {38, SHIFT, 184}, {39, SHIFT, 185}, {40, SHIFT, 186}, },
			{{-1, ERROR, 137}, {12, SHIFT, 189}, {21, SHIFT, 177}, {31, SHIFT, 178}, {32, SHIFT, 179}, {34, SHIFT, 180}, {35, SHIFT, 181}, {36, SHIFT, 182}, {37, SHIFT, 183}, {38, SHIFT, 184}, {39, SHIFT, 185}, {40, SHIFT, 186}, },
			{{-1, ERROR, 138}, {8, SHIFT, 191}, {21, SHIFT, 192}, {22, SHIFT, 193}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, {43, SHIFT, 194}, },
			{{-1, ERROR, 139}, {12, SHIFT, 199}, {21, SHIFT, 192}, {22, SHIFT, 193}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, {43, SHIFT, 194}, },
			{{-1, ERROR, 140}, {7, SHIFT, 201}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 127}, },
			{{-1, ERROR, 143}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 144}, {8, SHIFT, 203}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 145}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 146}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 147}, {8, SHIFT, 206}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 148}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 149}, {8, SHIFT, 208}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 108}, },
			{{-1, ERROR, 152}, {6, SHIFT, 209}, {10, SHIFT, 210}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 156}, {9, SHIFT, 211}, {46, SHIFT, 70}, {47, SHIFT, 212}, },
			{{-1, ERROR, 157}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 158}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 159}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 160}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 161}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 162}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 163}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 164}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 165}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 166}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 128}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 172}, {8, SHIFT, 226}, {22, SHIFT, 156}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {33, SHIFT, 163}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 174}, {12, SHIFT, 228}, {22, SHIFT, 156}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {33, SHIFT, 163}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, },
			{{-1, ERROR, 175}, {22, SHIFT, 156}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {33, SHIFT, 163}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 177}, {46, SHIFT, 230}, },
			{{-1, ERROR, 178}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 179}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 180}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 181}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 182}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 183}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 184}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 185}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, ERROR, 186}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, REDUCE, 134}, },
			{{-1, ERROR, 188}, {8, SHIFT, 240}, {21, SHIFT, 177}, {31, SHIFT, 178}, {32, SHIFT, 179}, {34, SHIFT, 180}, {35, SHIFT, 181}, {36, SHIFT, 182}, {37, SHIFT, 183}, {38, SHIFT, 184}, {39, SHIFT, 185}, {40, SHIFT, 186}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 190}, {12, SHIFT, 242}, {21, SHIFT, 177}, {31, SHIFT, 178}, {32, SHIFT, 179}, {34, SHIFT, 180}, {35, SHIFT, 181}, {36, SHIFT, 182}, {37, SHIFT, 183}, {38, SHIFT, 184}, {39, SHIFT, 185}, {40, SHIFT, 186}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 192}, {46, SHIFT, 243}, },
			{{-1, ERROR, 193}, {9, SHIFT, 211}, {46, SHIFT, 70}, {47, SHIFT, 212}, },
			{{-1, ERROR, 194}, {9, SHIFT, 69}, {46, SHIFT, 70}, {47, SHIFT, 71}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 198}, {8, SHIFT, 246}, {21, SHIFT, 192}, {22, SHIFT, 193}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, {43, SHIFT, 194}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 200}, {12, SHIFT, 248}, {21, SHIFT, 192}, {22, SHIFT, 193}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, {43, SHIFT, 194}, },
			{{-1, ERROR, 201}, {21, SHIFT, 192}, {22, SHIFT, 193}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, {43, SHIFT, 194}, },
			{{-1, REDUCE, 10}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 203}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 12}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 9}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 206}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 207}, {8, SHIFT, 252}, {22, SHIFT, 50}, {31, SHIFT, 51}, {32, SHIFT, 52}, },
			{{-1, ERROR, 208}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 209}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 109}, },
			{{-1, ERROR, 211}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 101}, {1, REDUCE, 104}, {2, REDUCE, 104}, {3, REDUCE, 104}, {4, REDUCE, 104}, {5, REDUCE, 104}, {9, REDUCE, 104}, {46, REDUCE, 104}, {47, REDUCE, 104}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 103}, {1, REDUCE, 105}, {2, REDUCE, 105}, {3, REDUCE, 105}, {4, REDUCE, 105}, {5, REDUCE, 105}, {9, REDUCE, 105}, {46, REDUCE, 105}, {47, REDUCE, 105}, },
			{{-1, ERROR, 215}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 92}, {0, SHIFT, 257}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 98}, },
			{{-1, ERROR, 225}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 129}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 229}, {8, SHIFT, 259}, {22, SHIFT, 156}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {33, SHIFT, 163}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 244}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 249}, {8, SHIFT, 261}, {21, SHIFT, 192}, {22, SHIFT, 193}, {23, SHIFT, 39}, {24, SHIFT, 40}, {25, SHIFT, 41}, {26, SHIFT, 42}, {27, SHIFT, 157}, {28, SHIFT, 158}, {29, SHIFT, 159}, {30, SHIFT, 160}, {31, SHIFT, 161}, {32, SHIFT, 162}, {40, SHIFT, 164}, {41, SHIFT, 165}, {42, SHIFT, 166}, {43, SHIFT, 194}, },
			{{-1, REDUCE, 14}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 11}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 252}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 13}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, ERROR, 254}, {10, SHIFT, 263}, },
			{{-1, ERROR, 255}, {1, SHIFT, 121}, {2, SHIFT, 122}, {3, SHIFT, 123}, {4, SHIFT, 124}, {5, SHIFT, 125}, {10, SHIFT, 264}, },
			{{-1, REDUCE, 97}, {9, SHIFT, 79}, {46, SHIFT, 70}, {47, SHIFT, 80}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 259}, {7, SHIFT, 55}, {46, SHIFT, 92}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 261}, {7, SHIFT, 270}, {44, SHIFT, 100}, {46, SHIFT, 101}, },
			{{-1, REDUCE, 15}, {18, SHIFT, 10}, {19, SHIFT, 11}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 102}, {1, REDUCE, 106}, {2, REDUCE, 106}, {3, REDUCE, 106}, {4, REDUCE, 106}, {5, REDUCE, 106}, {9, REDUCE, 106}, {46, REDUCE, 106}, {47, REDUCE, 106}, },
			{{-1, REDUCE, 113}, {1, SHIFT, 121}, {2, SHIFT, 122}, {3, SHIFT, 123}, {4, SHIFT, 124}, {5, SHIFT, 125}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 270}, {44, SHIFT, 100}, {46, SHIFT, 101}, {47, SHIFT, 102}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 274}, {8, SHIFT, 275}, {44, SHIFT, 100}, {46, SHIFT, 101}, {47, SHIFT, 102}, },
			{{-1, REDUCE, 54}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 12}, {19, 33}, {30, 33}, {32, 33}, {38, 33}, {61, 33}, {66, 33}, {68, 33}, {115, 33}, {130, 33}, {202, 33}, {204, 33}, {205, 33}, {250, 33}, {251, 33}, {253, 33}, {262, 33}, },
			{{-1, 3}, {4, 13}, },
			{{-1, 14}, {20, 35}, },
			{{-1, 15}, {20, 36}, },
			{{-1, 16}, {15, 29}, {20, 37}, {36, 65}, },
			{{-1, 17}, },
			{{-1, 18}, },
			{{-1, 94}, {97, 135}, },
			{{-1, 95}, {259, 267}, },
			{{-1, 57}, {56, 98}, {259, 268}, },
			{{-1, 96}, },
			{{-1, 269}, },
			{{-1, 126}, },
			{{-1, 103}, {108, 142}, {274, 142}, },
			{{-1, 104}, },
			{{-1, 105}, },
			{{-1, 106}, {261, 271}, },
			{{-1, 272}, },
			{{-1, 107}, },
			{{-1, 273}, },
			{{-1, 187}, {188, 241}, {190, 241}, },
			{{-1, 195}, {198, 247}, {200, 247}, {249, 247}, },
			{{-1, 43}, {45, 78}, },
			{{-1, 47}, {48, 85}, {49, 85}, },
			{{-1, 53}, {54, 91}, {109, 91}, {111, 91}, {112, 91}, {144, 91}, {147, 91}, {149, 91}, {207, 91}, },
			{{-1, 167}, {172, 227}, {174, 227}, {229, 227}, },
			{{-1, 168}, {138, 196}, {139, 196}, {198, 196}, {200, 196}, {201, 196}, {249, 196}, },
			{{-1, 169}, {21, 44}, {45, 44}, },
			{{-1, 170}, },
			{{-1, 171}, {138, 197}, {139, 197}, {198, 197}, {200, 197}, {201, 197}, {249, 197}, },
			{{-1, 213}, {39, 72}, {40, 74}, {41, 75}, {42, 76}, {51, 88}, {52, 89}, {126, 154}, {157, 216}, {158, 217}, {159, 218}, {160, 219}, {161, 220}, {162, 221}, {163, 222}, {164, 223}, {165, 224}, {178, 231}, {179, 232}, {180, 233}, {181, 234}, {182, 235}, {183, 236}, {184, 237}, {185, 238}, {186, 239}, {194, 245}, },
			{{-1, 81}, {69, 117}, {79, 120}, {83, 127}, {87, 127}, {209, 127}, {211, 255}, {215, 127}, {225, 127}, {244, 127}, {256, 265}, },
			{{-1, 73}, {46, 82}, {50, 82}, {69, 82}, {79, 82}, {83, 82}, {87, 82}, {118, 82}, {156, 214}, {166, 82}, {193, 214}, {209, 82}, {211, 82}, {215, 82}, {225, 82}, {244, 82}, {256, 82}, },
			{{-1, 83}, {50, 87}, {118, 152}, {156, 215}, {166, 225}, {193, 244}, },
			{{-1, 128}, {87, 129}, {209, 254}, {215, 256}, {225, 258}, {244, 260}, },
			{{-1, 266}, },
			{{-1, 4}, },
			{{-1, 19}, {15, 30}, {16, 32}, {20, 38}, {29, 61}, {36, 66}, {37, 68}, {65, 115}, {90, 130}, {143, 202}, {145, 204}, {146, 205}, {203, 250}, {206, 251}, {208, 253}, {252, 262}, },
			{{-1, 20}, },
			{{-1, 45}, },
			{{-1, 48}, {24, 49}, },
			{{-1, 54}, {59, 109}, {62, 111}, {63, 112}, {110, 144}, {113, 147}, {116, 149}, {148, 207}, },
			{{-1, 108}, {270, 274}, },
			{{-1, 172}, {132, 174}, {175, 229}, },
			{{-1, 97}, },
			{{-1, 198}, {139, 200}, {201, 249}, },
			{{-1, 188}, {137, 190}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'startshape'",
			"expecting: string",
			"expecting: EOF",
			"expecting: 'startshape', 'background', 'include', 'tile', 'size', 'rule', 'path'",
			"expecting: '{'",
			"expecting: filename",
			"expecting: '{', '['",
			"expecting: 'rule', 'path', EOF",
			"expecting: 'background', 'include', 'tile', 'size', 'rule', 'path'",
			"expecting: 'tile', 'size', 'rule', 'path'",
			"expecting: 'size', 'rule', 'path'",
			"expecting: hue token, saturation token, brightness token, alpha token",
			"expecting: size token",
			"expecting: size token, 'x', 'y'",
			"expecting: '{', number",
			"expecting: '(', string, number",
			"expecting: '}', hue token, saturation token, brightness token, alpha token",
			"expecting: '}', ']', size token",
			"expecting: '}', size token",
			"expecting: ']', size token",
			"expecting: '}', size token, 'x', 'y'",
			"expecting: string, number",
			"expecting: '}', pathop, string, number",
			"expecting: '('",
			"expecting: '|', '*', '+', '-', '/', '^', ',', '}', '(', ')', ']', parameters token, size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', 'x1', 'y1', 'x2', 'y2', 'rx', 'ry', rotate token, flip token, 'skew', 'width', string, number",
			"expecting: '}', ']', parameters token, size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', rotate token, flip token, 'skew', 'width'",
			"expecting: '|', '}', ']', parameters token, size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', rotate token, flip token, 'skew', 'width'",
			"expecting: '*', '+', '-', '/', '^', ',', '}', '(', ')', ']', parameters token, size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', rotate token, flip token, 'skew', 'width', string, number",
			"expecting: '*', '+', '-', '/', '^', ',', '}', '(', ')', ']', size token, string, number",
			"expecting: '}', '(', ']', size token, string, number",
			"expecting: 'rule', 'path'",
			"expecting: '*'",
			"expecting: '}', string, number",
			"expecting: '*', '+', '-', '/', '^', ')'",
			"expecting: '(', ')', string, number",
			"expecting: '*', '+', '-', '/', '^', '}', '(', ')', ']', parameters token, size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', rotate token, flip token, 'skew', 'width', string, number",
			"expecting: '}', size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', rotate token, flip token, 'skew'",
			"expecting: ']', size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', rotate token, flip token, 'skew'",
			"expecting: '}', 'rule', 'path', string, number, EOF",
			"expecting: '}', parameters token, 'x', 'y', 'x1', 'y1', 'x2', 'y2', 'rx', 'ry', rotate token",
			"expecting: ']', parameters token, 'x', 'y', 'x1', 'y1', 'x2', 'y2', 'rx', 'ry', rotate token",
			"expecting: '}', parameters token, size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', rotate token, flip token, 'skew', 'width'",
			"expecting: ']', parameters token, size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', rotate token, flip token, 'skew', 'width'",
			"expecting: ',', ')'",
			"expecting: '}', ']', size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', rotate token, flip token, 'skew'",
			"expecting: size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', rotate token, flip token, 'skew'",
			"expecting: '}', ']', parameters token, 'x', 'y', 'x1', 'y1', 'x2', 'y2', 'rx', 'ry', rotate token",
			"expecting: '}', ']', parameters token, size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', rotate token, flip token, 'skew', 'width'",
			"expecting: parameters token, size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', rotate token, flip token, 'skew', 'width'",
			"expecting: '*', '+', '-', '/', '^', '}', '(', ']', parameters token, size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', rotate token, flip token, 'skew', 'width', string, number",
			"expecting: ')'",
			"expecting: '}', '(', ']', size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', rotate token, flip token, 'skew', string, number",
			"expecting: '{', string",
			"expecting: '{', pathop, string",
			"expecting: '*', '+', '-', '/', '^', '}', ']', size token, hue token, saturation token, brightness token, alpha token, target hue token, target saturation token, target brightness token, target alpha token, 'x', 'y', 'z', rotate token, flip token, 'skew'",
			"expecting: pathop, string, number",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 3, 4, 5, 6, 4, 1, 1, 7, 3, 8, 9, 10, 7, 7, 7, 8, 11, 8, 12, 12, 13, 14, 4, 4, 10, 7, 4, 7, 7, 4, 8, 9, 10, 7, 15, 15, 15, 15, 16, 16, 16, 15, 17, 18, 19, 15, 15, 15, 20, 20, 21, 4, 7, 22, 13, 4, 7, 13, 13, 4, 10, 7, 4, 7, 15, 23, 24, 25, 24, 25, 25, 26, 9, 16, 15, 27, 28, 27, 29, 10, 17, 10, 15, 20, 20, 30, 20, 6, 31, 32, 32, 32, 32, 7, 7, 6, 6, 31, 22, 22, 22, 22, 22, 22, 20, 13, 20, 20, 13, 4, 7, 13, 33, 34, 25, 33, 15, 15, 15, 15, 15, 15, 35, 17, 20, 7, 36, 37, 4, 38, 32, 39, 40, 41, 42, 4, 7, 22, 30, 20, 30, 30, 20, 13, 20, 24, 24, 43, 27, 27, 32, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 44, 44, 25, 25, 44, 36, 32, 37, 45, 22, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 46, 39, 22, 40, 22, 1, 15, 15, 47, 47, 47, 41, 22, 42, 48, 7, 30, 7, 7, 30, 20, 30, 15, 24, 15, 49, 25, 49, 15, 25, 25, 25, 26, 25, 25, 44, 25, 25, 15, 32, 44, 32, 36, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 22, 46, 22, 47, 15, 47, 22, 47, 22, 41, 7, 7, 30, 7, 50, 33, 51, 25, 25, 52, 47, 53, 7, 24, 49, 54, 44, 32, 32, 32, 55, 22, 22, 22, 22, 22, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.jame.contextfree.cfdg.node;

import java.util.*;
import net.sf.jame.contextfree.cfdg.analysis.*;

@SuppressWarnings("nls")
public final class ABasicPathCommand extends PPathCommand
{
    private TPathcmd _pathcmd_;
    private TLCbkt _lCbkt_;
    private final LinkedList<PPathAdjustment> _pathAdjustment_ = new LinkedList<PPathAdjustment>();
    private TRCbkt _rCbkt_;

    public ABasicPathCommand()
    {
        // Constructor
    }

    public ABasicPathCommand(
        @SuppressWarnings("hiding") TPathcmd _pathcmd_,
        @SuppressWarnings("hiding") TLCbkt _lCbkt_,
        @SuppressWarnings("hiding") List<PPathAdjustment> _pathAdjustment_,
        @SuppressWarnings("hiding") TRCbkt _rCbkt_)
    {
        // Constructor
        setPathcmd(_pathcmd_);

        setLCbkt(_lCbkt_);

        setPathAdjustment(_pathAdjustment_);

        setRCbkt(_rCbkt_);

    }

    @Override
    public Object clone()
    {
        return new ABasicPathCommand(
            cloneNode(this._pathcmd_),
            cloneNode(this._lCbkt_),
            cloneList(this._pathAdjustment_),
            cloneNode(this._rCbkt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABasicPathCommand(this);
    }

    public TPathcmd getPathcmd()
    {
        return this._pathcmd_;
    }

    public void setPathcmd(TPathcmd node)
    {
        if(this._pathcmd_ != null)
        {
            this._pathcmd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pathcmd_ = node;
    }

    public TLCbkt getLCbkt()
    {
        return this._lCbkt_;
    }

    public void setLCbkt(TLCbkt node)
    {
        if(this._lCbkt_ != null)
        {
            this._lCbkt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lCbkt_ = node;
    }

    public LinkedList<PPathAdjustment> getPathAdjustment()
    {
        return this._pathAdjustment_;
    }

    public void setPathAdjustment(List<PPathAdjustment> list)
    {
        this._pathAdjustment_.clear();
        this._pathAdjustment_.addAll(list);
        for(PPathAdjustment e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRCbkt getRCbkt()
    {
        return this._rCbkt_;
    }

    public void setRCbkt(TRCbkt node)
    {
        if(this._rCbkt_ != null)
        {
            this._rCbkt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rCbkt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pathcmd_)
            + toString(this._lCbkt_)
            + toString(this._pathAdjustment_)
            + toString(this._rCbkt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pathcmd_ == child)
        {
            this._pathcmd_ = null;
            return;
        }

        if(this._lCbkt_ == child)
        {
            this._lCbkt_ = null;
            return;
        }

        if(this._pathAdjustment_.remove(child))
        {
            return;
        }

        if(this._rCbkt_ == child)
        {
            this._rCbkt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pathcmd_ == oldChild)
        {
            setPathcmd((TPathcmd) newChild);
            return;
        }

        if(this._lCbkt_ == oldChild)
        {
            setLCbkt((TLCbkt) newChild);
            return;
        }

        for(ListIterator<PPathAdjustment> i = this._pathAdjustment_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPathAdjustment) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rCbkt_ == oldChild)
        {
            setRCbkt((TRCbkt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.jame.contextfree.cfdg.node;

import java.util.*;
import net.sf.jame.contextfree.cfdg.analysis.*;

@SuppressWarnings("nls")
public final class AOrderedPathopPathOperation extends PPathopPathOperation
{
    private TPathop _pathop_;
    private TLSbkt _lSbkt_;
    private final LinkedList<PPathPoints> _pathPoints_ = new LinkedList<PPathPoints>();
    private TRSbkt _rSbkt_;

    public AOrderedPathopPathOperation()
    {
        // Constructor
    }

    public AOrderedPathopPathOperation(
        @SuppressWarnings("hiding") TPathop _pathop_,
        @SuppressWarnings("hiding") TLSbkt _lSbkt_,
        @SuppressWarnings("hiding") List<PPathPoints> _pathPoints_,
        @SuppressWarnings("hiding") TRSbkt _rSbkt_)
    {
        // Constructor
        setPathop(_pathop_);

        setLSbkt(_lSbkt_);

        setPathPoints(_pathPoints_);

        setRSbkt(_rSbkt_);

    }

    @Override
    public Object clone()
    {
        return new AOrderedPathopPathOperation(
            cloneNode(this._pathop_),
            cloneNode(this._lSbkt_),
            cloneList(this._pathPoints_),
            cloneNode(this._rSbkt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrderedPathopPathOperation(this);
    }

    public TPathop getPathop()
    {
        return this._pathop_;
    }

    public void setPathop(TPathop node)
    {
        if(this._pathop_ != null)
        {
            this._pathop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pathop_ = node;
    }

    public TLSbkt getLSbkt()
    {
        return this._lSbkt_;
    }

    public void setLSbkt(TLSbkt node)
    {
        if(this._lSbkt_ != null)
        {
            this._lSbkt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lSbkt_ = node;
    }

    public LinkedList<PPathPoints> getPathPoints()
    {
        return this._pathPoints_;
    }

    public void setPathPoints(List<PPathPoints> list)
    {
        this._pathPoints_.clear();
        this._pathPoints_.addAll(list);
        for(PPathPoints e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRSbkt getRSbkt()
    {
        return this._rSbkt_;
    }

    public void setRSbkt(TRSbkt node)
    {
        if(this._rSbkt_ != null)
        {
            this._rSbkt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rSbkt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._pathop_)
            + toString(this._lSbkt_)
            + toString(this._pathPoints_)
            + toString(this._rSbkt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._pathop_ == child)
        {
            this._pathop_ = null;
            return;
        }

        if(this._lSbkt_ == child)
        {
            this._lSbkt_ = null;
            return;
        }

        if(this._pathPoints_.remove(child))
        {
            return;
        }

        if(this._rSbkt_ == child)
        {
            this._rSbkt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._pathop_ == oldChild)
        {
            setPathop((TPathop) newChild);
            return;
        }

        if(this._lSbkt_ == oldChild)
        {
            setLSbkt((TLSbkt) newChild);
            return;
        }

        for(ListIterator<PPathPoints> i = this._pathPoints_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPathPoints) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rSbkt_ == oldChild)
        {
            setRSbkt((TRSbkt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.jame.contextfree.cfdg.analysis;

import java.util.*;
import net.sf.jame.contextfree.cfdg.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPCfdg().apply(this);
        outStart(node);
    }

    public void inACfdg(ACfdg node)
    {
        defaultIn(node);
    }

    public void outACfdg(ACfdg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACfdg(ACfdg node)
    {
        inACfdg(node);
        {
            List<PFigureDeclaration> copy = new ArrayList<PFigureDeclaration>(node.getFigureDeclaration());
            Collections.reverse(copy);
            for(PFigureDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSizeDeclaration() != null)
        {
            node.getSizeDeclaration().apply(this);
        }
        if(node.getTileDeclaration() != null)
        {
            node.getTileDeclaration().apply(this);
        }
        if(node.getBackgroundDeclaration() != null)
        {
            node.getBackgroundDeclaration().apply(this);
        }
        {
            List<PIncludeDeclaration> copy = new ArrayList<PIncludeDeclaration>(node.getIncludeDeclaration());
            Collections.reverse(copy);
            for(PIncludeDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PStartshapeDeclaration> copy = new ArrayList<PStartshapeDeclaration>(node.getStartshapeDeclaration());
            Collections.reverse(copy);
            for(PStartshapeDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        outACfdg(node);
    }

    public void inARuleFigureDeclaration(ARuleFigureDeclaration node)
    {
        defaultIn(node);
    }

    public void outARuleFigureDeclaration(ARuleFigureDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARuleFigureDeclaration(ARuleFigureDeclaration node)
    {
        inARuleFigureDeclaration(node);
        if(node.getRuleDeclaration() != null)
        {
            node.getRuleDeclaration().apply(this);
        }
        outARuleFigureDeclaration(node);
    }

    public void inAPathFigureDeclaration(APathFigureDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPathFigureDeclaration(APathFigureDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathFigureDeclaration(APathFigureDeclaration node)
    {
        inAPathFigureDeclaration(node);
        if(node.getPathDeclaration() != null)
        {
            node.getPathDeclaration().apply(this);
        }
        outAPathFigureDeclaration(node);
    }

    public void inAStartshapeDeclaration(AStartshapeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStartshapeDeclaration(AStartshapeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartshapeDeclaration(AStartshapeDeclaration node)
    {
        inAStartshapeDeclaration(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getStartshape() != null)
        {
            node.getStartshape().apply(this);
        }
        outAStartshapeDeclaration(node);
    }

    public void inAIncludeDeclaration(AIncludeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIncludeDeclaration(AIncludeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncludeDeclaration(AIncludeDeclaration node)
    {
        inAIncludeDeclaration(node);
        if(node.getFilename() != null)
        {
            node.getFilename().apply(this);
        }
        if(node.getInclude() != null)
        {
            node.getInclude().apply(this);
        }
        outAIncludeDeclaration(node);
    }

    public void inABackgroundDeclaration(ABackgroundDeclaration node)
    {
        defaultIn(node);
    }

    public void outABackgroundDeclaration(ABackgroundDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABackgroundDeclaration(ABackgroundDeclaration node)
    {
        inABackgroundDeclaration(node);
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PBackgroundAdjustment> copy = new ArrayList<PBackgroundAdjustment>(node.getBackgroundAdjustment());
            Collections.reverse(copy);
            for(PBackgroundAdjustment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        if(node.getBackground() != null)
        {
            node.getBackground().apply(this);
        }
        outABackgroundDeclaration(node);
    }

    public void inADefaultTileDeclaration(ADefaultTileDeclaration node)
    {
        defaultIn(node);
    }

    public void outADefaultTileDeclaration(ADefaultTileDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultTileDeclaration(ADefaultTileDeclaration node)
    {
        inADefaultTileDeclaration(node);
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PTileAdjustment> copy = new ArrayList<PTileAdjustment>(node.getTileAdjustment());
            Collections.reverse(copy);
            for(PTileAdjustment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        if(node.getTile() != null)
        {
            node.getTile().apply(this);
        }
        outADefaultTileDeclaration(node);
    }

    public void inAOrderedTileDeclaration(AOrderedTileDeclaration node)
    {
        defaultIn(node);
    }

    public void outAOrderedTileDeclaration(AOrderedTileDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrderedTileDeclaration(AOrderedTileDeclaration node)
    {
        inAOrderedTileDeclaration(node);
        if(node.getRSbkt() != null)
        {
            node.getRSbkt().apply(this);
        }
        {
            List<PTileAdjustment> copy = new ArrayList<PTileAdjustment>(node.getTileAdjustment());
            Collections.reverse(copy);
            for(PTileAdjustment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLSbkt() != null)
        {
            node.getLSbkt().apply(this);
        }
        if(node.getTile() != null)
        {
            node.getTile().apply(this);
        }
        outAOrderedTileDeclaration(node);
    }

    public void inADefaultSizeDeclaration(ADefaultSizeDeclaration node)
    {
        defaultIn(node);
    }

    public void outADefaultSizeDeclaration(ADefaultSizeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultSizeDeclaration(ADefaultSizeDeclaration node)
    {
        inADefaultSizeDeclaration(node);
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PSizeAdjustment> copy = new ArrayList<PSizeAdjustment>(node.getSizeAdjustment());
            Collections.reverse(copy);
            for(PSizeAdjustment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        if(node.getSize() != null)
        {
            node.getSize().apply(this);
        }
        outADefaultSizeDeclaration(node);
    }

    public void inAOrderedSizeDeclaration(AOrderedSizeDeclaration node)
    {
        defaultIn(node);
    }

    public void outAOrderedSizeDeclaration(AOrderedSizeDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrderedSizeDeclaration(AOrderedSizeDeclaration node)
    {
        inAOrderedSizeDeclaration(node);
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PSizeAdjustment> copy = new ArrayList<PSizeAdjustment>(node.getSizeAdjustment());
            Collections.reverse(copy);
            for(PSizeAdjustment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        if(node.getSize() != null)
        {
            node.getSize().apply(this);
        }
        outAOrderedSizeDeclaration(node);
    }

    public void inARuleDeclaration(ARuleDeclaration node)
    {
        defaultIn(node);
    }

    public void outARuleDeclaration(ARuleDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARuleDeclaration(ARuleDeclaration node)
    {
        inARuleDeclaration(node);
        if(node.getListShapeReplacement() != null)
        {
            node.getListShapeReplacement().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getRule() != null)
        {
            node.getRule().apply(this);
        }
        outARuleDeclaration(node);
    }

    public void inAPathDeclaration(APathDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPathDeclaration(APathDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathDeclaration(APathDeclaration node)
    {
        inAPathDeclaration(node);
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PPathOperationDeclaration> copy = new ArrayList<PPathOperationDeclaration>(node.getPathOperationDeclaration());
            Collections.reverse(copy);
            for(PPathOperationDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getPath() != null)
        {
            node.getPath().apply(this);
        }
        outAPathDeclaration(node);
    }

    public void inAMultiShapeReplacementDeclaration(AMultiShapeReplacementDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMultiShapeReplacementDeclaration(AMultiShapeReplacementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiShapeReplacementDeclaration(AMultiShapeReplacementDeclaration node)
    {
        inAMultiShapeReplacementDeclaration(node);
        if(node.getMultiShapeReplacement() != null)
        {
            node.getMultiShapeReplacement().apply(this);
        }
        outAMultiShapeReplacementDeclaration(node);
    }

    public void inASingleShapeReplacementDeclaration(ASingleShapeReplacementDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleShapeReplacementDeclaration(ASingleShapeReplacementDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleShapeReplacementDeclaration(ASingleShapeReplacementDeclaration node)
    {
        inASingleShapeReplacementDeclaration(node);
        if(node.getSingleShapeReplacement() != null)
        {
            node.getSingleShapeReplacement().apply(this);
        }
        outASingleShapeReplacementDeclaration(node);
    }

    public void inADefaultSingleShapeReplacement(ADefaultSingleShapeReplacement node)
    {
        defaultIn(node);
    }

    public void outADefaultSingleShapeReplacement(ADefaultSingleShapeReplacement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultSingleShapeReplacement(ADefaultSingleShapeReplacement node)
    {
        inADefaultSingleShapeReplacement(node);
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PShapeAdjustment> copy = new ArrayList<PShapeAdjustment>(node.getShapeAdjustment());
            Collections.reverse(copy);
            for(PShapeAdjustment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outADefaultSingleShapeReplacement(node);
    }

    public void inAOrderedSingleShapeReplacement(AOrderedSingleShapeReplacement node)
    {
        defaultIn(node);
    }

    public void outAOrderedSingleShapeReplacement(AOrderedSingleShapeReplacement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrderedSingleShapeReplacement(AOrderedSingleShapeReplacement node)
    {
        inAOrderedSingleShapeReplacement(node);
        if(node.getRSbkt() != null)
        {
            node.getRSbkt().apply(this);
        }
        {
            List<PShapeAdjustment> copy = new ArrayList<PShapeAdjustment>(node.getShapeAdjustment());
            Collections.reverse(copy);
            for(PShapeAdjustment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLSbkt() != null)
        {
            node.getLSbkt().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAOrderedSingleShapeReplacement(node);
    }

    public void inAListShapeReplacement(AListShapeReplacement node)
    {
        defaultIn(node);
    }

    public void outAListShapeReplacement(AListShapeReplacement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListShapeReplacement(AListShapeReplacement node)
    {
        inAListShapeReplacement(node);
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PShapeReplacementDeclaration> copy = new ArrayList<PShapeReplacementDeclaration>(node.getShapeReplacementDeclaration());
            Collections.reverse(copy);
            for(PShapeReplacementDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        outAListShapeReplacement(node);
    }

    public void inAMultiShapeReplacement(AMultiShapeReplacement node)
    {
        defaultIn(node);
    }

    public void outAMultiShapeReplacement(AMultiShapeReplacement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiShapeReplacement(AMultiShapeReplacement node)
    {
        inAMultiShapeReplacement(node);
        if(node.getMultiShapeReplacementBody() != null)
        {
            node.getMultiShapeReplacementBody().apply(this);
        }
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PShapeAdjustment> copy = new ArrayList<PShapeAdjustment>(node.getShapeAdjustment());
            Collections.reverse(copy);
            for(PShapeAdjustment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAMultiShapeReplacement(node);
    }

    public void inASingleMultiShapeReplacementBody(ASingleMultiShapeReplacementBody node)
    {
        defaultIn(node);
    }

    public void outASingleMultiShapeReplacementBody(ASingleMultiShapeReplacementBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleMultiShapeReplacementBody(ASingleMultiShapeReplacementBody node)
    {
        inASingleMultiShapeReplacementBody(node);
        if(node.getSingleShapeReplacement() != null)
        {
            node.getSingleShapeReplacement().apply(this);
        }
        outASingleMultiShapeReplacementBody(node);
    }

    public void inAListMultiShapeReplacementBody(AListMultiShapeReplacementBody node)
    {
        defaultIn(node);
    }

    public void outAListMultiShapeReplacementBody(AListMultiShapeReplacementBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListMultiShapeReplacementBody(AListMultiShapeReplacementBody node)
    {
        inAListMultiShapeReplacementBody(node);
        if(node.getListShapeReplacement() != null)
        {
            node.getListShapeReplacement().apply(this);
        }
        outAListMultiShapeReplacementBody(node);
    }

    public void inAStarOperator(AStarOperator node)
    {
        defaultIn(node);
    }

    public void outAStarOperator(AStarOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStarOperator(AStarOperator node)
    {
        inAStarOperator(node);
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        outAStarOperator(node);
    }

    public void inAPlusOperator(APlusOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusOperator(APlusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOperator(APlusOperator node)
    {
        inAPlusOperator(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusOperator(node);
    }

    public void inAMinusOperator(AMinusOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusOperator(AMinusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOperator(AMinusOperator node)
    {
        inAMinusOperator(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusOperator(node);
    }

    public void inASlashOperator(ASlashOperator node)
    {
        defaultIn(node);
    }

    public void outASlashOperator(ASlashOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASlashOperator(ASlashOperator node)
    {
        inASlashOperator(node);
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        outASlashOperator(node);
    }

    public void inAArrowOperator(AArrowOperator node)
    {
        defaultIn(node);
    }

    public void outAArrowOperator(AArrowOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrowOperator(AArrowOperator node)
    {
        inAArrowOperator(node);
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        outAArrowOperator(node);
    }

    public void inAMultiPathOperationDeclaration(AMultiPathOperationDeclaration node)
    {
        defaultIn(node);
    }

    public void outAMultiPathOperationDeclaration(AMultiPathOperationDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiPathOperationDeclaration(AMultiPathOperationDeclaration node)
    {
        inAMultiPathOperationDeclaration(node);
        if(node.getMultiPathOperation() != null)
        {
            node.getMultiPathOperation().apply(this);
        }
        outAMultiPathOperationDeclaration(node);
    }

    public void inAPathPathOperationDeclaration(APathPathOperationDeclaration node)
    {
        defaultIn(node);
    }

    public void outAPathPathOperationDeclaration(APathPathOperationDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathPathOperationDeclaration(APathPathOperationDeclaration node)
    {
        inAPathPathOperationDeclaration(node);
        if(node.getPathOperation() != null)
        {
            node.getPathOperation().apply(this);
        }
        outAPathPathOperationDeclaration(node);
    }

    public void inADefaultSimplePathOperation(ADefaultSimplePathOperation node)
    {
        defaultIn(node);
    }

    public void outADefaultSimplePathOperation(ADefaultSimplePathOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultSimplePathOperation(ADefaultSimplePathOperation node)
    {
        inADefaultSimplePathOperation(node);
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PPathAdjustment> copy = new ArrayList<PPathAdjustment>(node.getPathAdjustment());
            Collections.reverse(copy);
            for(PPathAdjustment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outADefaultSimplePathOperation(node);
    }

    public void inAOrderedSimplePathOperation(AOrderedSimplePathOperation node)
    {
        defaultIn(node);
    }

    public void outAOrderedSimplePathOperation(AOrderedSimplePathOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrderedSimplePathOperation(AOrderedSimplePathOperation node)
    {
        inAOrderedSimplePathOperation(node);
        if(node.getRSbkt() != null)
        {
            node.getRSbkt().apply(this);
        }
        {
            List<PPathAdjustment> copy = new ArrayList<PPathAdjustment>(node.getPathAdjustment());
            Collections.reverse(copy);
            for(PPathAdjustment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLSbkt() != null)
        {
            node.getLSbkt().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAOrderedSimplePathOperation(node);
    }

    public void inADefaultPathopPathOperation(ADefaultPathopPathOperation node)
    {
        defaultIn(node);
    }

    public void outADefaultPathopPathOperation(ADefaultPathopPathOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultPathopPathOperation(ADefaultPathopPathOperation node)
    {
        inADefaultPathopPathOperation(node);
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PPathPoints> copy = new ArrayList<PPathPoints>(node.getPathPoints());
            Collections.reverse(copy);
            for(PPathPoints e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        if(node.getPathop() != null)
        {
            node.getPathop().apply(this);
        }
        outADefaultPathopPathOperation(node);
    }

    public void inAOrderedPathopPathOperation(AOrderedPathopPathOperation node)
    {
        defaultIn(node);
    }

    public void outAOrderedPathopPathOperation(AOrderedPathopPathOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrderedPathopPathOperation(AOrderedPathopPathOperation node)
    {
        inAOrderedPathopPathOperation(node);
        if(node.getRSbkt() != null)
        {
            node.getRSbkt().apply(this);
        }
        {
            List<PPathPoints> copy = new ArrayList<PPathPoints>(node.getPathPoints());
            Collections.reverse(copy);
            for(PPathPoints e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLSbkt() != null)
        {
            node.getLSbkt().apply(this);
        }
        if(node.getPathop() != null)
        {
            node.getPathop().apply(this);
        }
        outAOrderedPathopPathOperation(node);
    }

    public void inASimplePathOperation(ASimplePathOperation node)
    {
        defaultIn(node);
    }

    public void outASimplePathOperation(ASimplePathOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplePathOperation(ASimplePathOperation node)
    {
        inASimplePathOperation(node);
        if(node.getSimplePathOperation() != null)
        {
            node.getSimplePathOperation().apply(this);
        }
        outASimplePathOperation(node);
    }

    public void inAPathopPathOperation(APathopPathOperation node)
    {
        defaultIn(node);
    }

    public void outAPathopPathOperation(APathopPathOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathopPathOperation(APathopPathOperation node)
    {
        inAPathopPathOperation(node);
        if(node.getPathopPathOperation() != null)
        {
            node.getPathopPathOperation().apply(this);
        }
        outAPathopPathOperation(node);
    }

    public void inAListPathOperation(AListPathOperation node)
    {
        defaultIn(node);
    }

    public void outAListPathOperation(AListPathOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListPathOperation(AListPathOperation node)
    {
        inAListPathOperation(node);
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PPathOperationDeclaration> copy = new ArrayList<PPathOperationDeclaration>(node.getPathOperationDeclaration());
            Collections.reverse(copy);
            for(PPathOperationDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        outAListPathOperation(node);
    }

    public void inAMultiPathOperation(AMultiPathOperation node)
    {
        defaultIn(node);
    }

    public void outAMultiPathOperation(AMultiPathOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiPathOperation(AMultiPathOperation node)
    {
        inAMultiPathOperation(node);
        if(node.getMultiPathOperationBody() != null)
        {
            node.getMultiPathOperationBody().apply(this);
        }
        if(node.getRCbkt() != null)
        {
            node.getRCbkt().apply(this);
        }
        {
            List<PPathAdjustment> copy = new ArrayList<PPathAdjustment>(node.getPathAdjustment());
            Collections.reverse(copy);
            for(PPathAdjustment e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLCbkt() != null)
        {
            node.getLCbkt().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAMultiPathOperation(node);
    }

    public void inAPathMultiPathOperationBody(APathMultiPathOperationBody node)
    {
        defaultIn(node);
    }

    public void outAPathMultiPathOperationBody(APathMultiPathOperationBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPathMultiPathOperationBody(APathMultiPathOperationBody node)
    {
        inAPathMultiPathOperationBody(node);
        if(node.getPathOperation() != null)
        {
            node.getPathOperation().apply(this);
        }
        outAPathMultiPathOperationBody(node);
    }

    public void inAListMultiPathOperationBody(AListMultiPathOperationBody node)
    {
        defaultIn(node);
    }

    public void outAListMultiPathOperationBody(AListMultiPathOperationBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListMultiPathOperationBody(AListMultiPathOperationBody node)
    {
        inAListMultiPathOperationBody(node);
        if(node.getListPathOperation() != null)
        {
            node.getListPathOperation().apply(this);
        }
        outAListMultiPathOperationBody(node);
    }

    public void inAXPathPoints(AXPathPoints node)
    {
        defaultIn(node);
    }

    public void outAXPathPoints(AXPathPoints node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXPathPoints(AXPathPoints node)
    {
        inAXPathPoints(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getXToken() != null)
        {
            node.getXToken().apply(this);
        }
        outAXPathPoints(node);
    }

    public void inAYPathPoints(AYPathPoints node)
    {
        defaultIn(node);
    }

    public void outAYPathPoints(AYPathPoints node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAYPathPoints(AYPathPoints node)
    {
        inAYPathPoints(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getYToken() != null)
        {
            node.getYToken().apply(this);
        }
        outAYPathPoints(node);
    }

    public void inAX1PathPoints(AX1PathPoints node)
    {
        defaultIn(node);
    }

    public void outAX1PathPoints(AX1PathPoints node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAX1PathPoints(AX1PathPoints node)
    {
        inAX1PathPoints(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getX1Token() != null)
        {
            node.getX1Token().apply(this);
        }
        outAX1PathPoints(node);
    }

    public void inAY1PathPoints(AY1PathPoints node)
    {
        defaultIn(node);
    }

    public void outAY1PathPoints(AY1PathPoints node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAY1PathPoints(AY1PathPoints node)
    {
        inAY1PathPoints(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getY1Token() != null)
        {
            node.getY1Token().apply(this);
        }
        outAY1PathPoints(node);
    }

    public void inAX2PathPoints(AX2PathPoints node)
    {
        defaultIn(node);
    }

    public void outAX2PathPoints(AX2PathPoints node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAX2PathPoints(AX2PathPoints node)
    {
        inAX2PathPoints(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getX2Token() != null)
        {
            node.getX2Token().apply(this);
        }
        outAX2PathPoints(node);
    }

    public void inAY2PathPoints(AY2PathPoints node)
    {
        defaultIn(node);
    }

    public void outAY2PathPoints(AY2PathPoints node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAY2PathPoints(AY2PathPoints node)
    {
        inAY2PathPoints(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getY2Token() != null)
        {
            node.getY2Token().apply(this);
        }
        outAY2PathPoints(node);
    }

    public void inARxPathPoints(ARxPathPoints node)
    {
        defaultIn(node);
    }

    public void outARxPathPoints(ARxPathPoints node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARxPathPoints(ARxPathPoints node)
    {
        inARxPathPoints(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRxToken() != null)
        {
            node.getRxToken().apply(this);
        }
        outARxPathPoints(node);
    }

    public void inARyPathPoints(ARyPathPoints node)
    {
        defaultIn(node);
    }

    public void outARyPathPoints(ARyPathPoints node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARyPathPoints(ARyPathPoints node)
    {
        inARyPathPoints(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRyToken() != null)
        {
            node.getRyToken().apply(this);
        }
        outARyPathPoints(node);
    }

    public void inARotatePathPoints(ARotatePathPoints node)
    {
        defaultIn(node);
    }

    public void outARotatePathPoints(ARotatePathPoints node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARotatePathPoints(ARotatePathPoints node)
    {
        inARotatePathPoints(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRotateToken() != null)
        {
            node.getRotateToken().apply(this);
        }
        outARotatePathPoints(node);
    }

    public void inAParametersPathPoints(AParametersPathPoints node)
    {
        defaultIn(node);
    }

    public void outAParametersPathPoints(AParametersPathPoints node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersPathPoints(AParametersPathPoints node)
    {
        inAParametersPathPoints(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getParametersToken() != null)
        {
            node.getParametersToken().apply(this);
        }
        outAParametersPathPoints(node);
    }

    public void inAColorPathAdjustment(AColorPathAdjustment node)
    {
        defaultIn(node);
    }

    public void outAColorPathAdjustment(AColorPathAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColorPathAdjustment(AColorPathAdjustment node)
    {
        inAColorPathAdjustment(node);
        if(node.getColorAdjustment() != null)
        {
            node.getColorAdjustment().apply(this);
        }
        outAColorPathAdjustment(node);
    }

    public void inAGeometryPathAdjustment(AGeometryPathAdjustment node)
    {
        defaultIn(node);
    }

    public void outAGeometryPathAdjustment(AGeometryPathAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeometryPathAdjustment(AGeometryPathAdjustment node)
    {
        inAGeometryPathAdjustment(node);
        if(node.getGeometryAdjustment() != null)
        {
            node.getGeometryAdjustment().apply(this);
        }
        outAGeometryPathAdjustment(node);
    }

    public void inAStrokePathAdjustment(AStrokePathAdjustment node)
    {
        defaultIn(node);
    }

    public void outAStrokePathAdjustment(AStrokePathAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrokePathAdjustment(AStrokePathAdjustment node)
    {
        inAStrokePathAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getStrokewidthToken() != null)
        {
            node.getStrokewidthToken().apply(this);
        }
        outAStrokePathAdjustment(node);
    }

    public void inAParametersPathAdjustment(AParametersPathAdjustment node)
    {
        defaultIn(node);
    }

    public void outAParametersPathAdjustment(AParametersPathAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametersPathAdjustment(AParametersPathAdjustment node)
    {
        inAParametersPathAdjustment(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getParametersToken() != null)
        {
            node.getParametersToken().apply(this);
        }
        outAParametersPathAdjustment(node);
    }

    public void inABackgroundAdjustment(ABackgroundAdjustment node)
    {
        defaultIn(node);
    }

    public void outABackgroundAdjustment(ABackgroundAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABackgroundAdjustment(ABackgroundAdjustment node)
    {
        inABackgroundAdjustment(node);
        if(node.getSimpleColorAdjustment() != null)
        {
            node.getSimpleColorAdjustment().apply(this);
        }
        outABackgroundAdjustment(node);
    }

    public void inATileAdjustment(ATileAdjustment node)
    {
        defaultIn(node);
    }

    public void outATileAdjustment(ATileAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATileAdjustment(ATileAdjustment node)
    {
        inATileAdjustment(node);
        if(node.getSecondExpression() != null)
        {
            node.getSecondExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        if(node.getSizeToken() != null)
        {
            node.getSizeToken().apply(this);
        }
        outATileAdjustment(node);
    }

    public void inAXSizeAdjustment(AXSizeAdjustment node)
    {
        defaultIn(node);
    }

    public void outAXSizeAdjustment(AXSizeAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXSizeAdjustment(AXSizeAdjustment node)
    {
        inAXSizeAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getXToken() != null)
        {
            node.getXToken().apply(this);
        }
        outAXSizeAdjustment(node);
    }

    public void inAYSizeAdjustment(AYSizeAdjustment node)
    {
        defaultIn(node);
    }

    public void outAYSizeAdjustment(AYSizeAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAYSizeAdjustment(AYSizeAdjustment node)
    {
        inAYSizeAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getYToken() != null)
        {
            node.getYToken().apply(this);
        }
        outAYSizeAdjustment(node);
    }

    public void inASizeSizeAdjustment(ASizeSizeAdjustment node)
    {
        defaultIn(node);
    }

    public void outASizeSizeAdjustment(ASizeSizeAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizeSizeAdjustment(ASizeSizeAdjustment node)
    {
        inASizeSizeAdjustment(node);
        if(node.getSecondExpression() != null)
        {
            node.getSecondExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        if(node.getSizeToken() != null)
        {
            node.getSizeToken().apply(this);
        }
        outASizeSizeAdjustment(node);
    }

    public void inAColorShapeAdjustment(AColorShapeAdjustment node)
    {
        defaultIn(node);
    }

    public void outAColorShapeAdjustment(AColorShapeAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAColorShapeAdjustment(AColorShapeAdjustment node)
    {
        inAColorShapeAdjustment(node);
        if(node.getColorAdjustment() != null)
        {
            node.getColorAdjustment().apply(this);
        }
        outAColorShapeAdjustment(node);
    }

    public void inAGeometryShapeAdjustment(AGeometryShapeAdjustment node)
    {
        defaultIn(node);
    }

    public void outAGeometryShapeAdjustment(AGeometryShapeAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeometryShapeAdjustment(AGeometryShapeAdjustment node)
    {
        inAGeometryShapeAdjustment(node);
        if(node.getGeometryAdjustment() != null)
        {
            node.getGeometryAdjustment().apply(this);
        }
        outAGeometryShapeAdjustment(node);
    }

    public void inAZShapeAdjustment(AZShapeAdjustment node)
    {
        defaultIn(node);
    }

    public void outAZShapeAdjustment(AZShapeAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAZShapeAdjustment(AZShapeAdjustment node)
    {
        inAZShapeAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getZToken() != null)
        {
            node.getZToken().apply(this);
        }
        outAZShapeAdjustment(node);
    }

    public void inASize3ShapeAdjustment(ASize3ShapeAdjustment node)
    {
        defaultIn(node);
    }

    public void outASize3ShapeAdjustment(ASize3ShapeAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASize3ShapeAdjustment(ASize3ShapeAdjustment node)
    {
        inASize3ShapeAdjustment(node);
        if(node.getThirdExpression() != null)
        {
            node.getThirdExpression().apply(this);
        }
        if(node.getSecondExpression() != null)
        {
            node.getSecondExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        if(node.getSizeToken() != null)
        {
            node.getSizeToken().apply(this);
        }
        outASize3ShapeAdjustment(node);
    }

    public void inASimpleColorAdjustment(ASimpleColorAdjustment node)
    {
        defaultIn(node);
    }

    public void outASimpleColorAdjustment(ASimpleColorAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleColorAdjustment(ASimpleColorAdjustment node)
    {
        inASimpleColorAdjustment(node);
        if(node.getSimpleColorAdjustment() != null)
        {
            node.getSimpleColorAdjustment().apply(this);
        }
        outASimpleColorAdjustment(node);
    }

    public void inATargetColorAdjustment(ATargetColorAdjustment node)
    {
        defaultIn(node);
    }

    public void outATargetColorAdjustment(ATargetColorAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATargetColorAdjustment(ATargetColorAdjustment node)
    {
        inATargetColorAdjustment(node);
        if(node.getTargetColorAdjustment() != null)
        {
            node.getTargetColorAdjustment().apply(this);
        }
        outATargetColorAdjustment(node);
    }

    public void inAHueSimpleColorAdjustment(AHueSimpleColorAdjustment node)
    {
        defaultIn(node);
    }

    public void outAHueSimpleColorAdjustment(AHueSimpleColorAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHueSimpleColorAdjustment(AHueSimpleColorAdjustment node)
    {
        inAHueSimpleColorAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getHueToken() != null)
        {
            node.getHueToken().apply(this);
        }
        outAHueSimpleColorAdjustment(node);
    }

    public void inABrightnessSimpleColorAdjustment(ABrightnessSimpleColorAdjustment node)
    {
        defaultIn(node);
    }

    public void outABrightnessSimpleColorAdjustment(ABrightnessSimpleColorAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrightnessSimpleColorAdjustment(ABrightnessSimpleColorAdjustment node)
    {
        inABrightnessSimpleColorAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getBrightnessToken() != null)
        {
            node.getBrightnessToken().apply(this);
        }
        outABrightnessSimpleColorAdjustment(node);
    }

    public void inASaturationSimpleColorAdjustment(ASaturationSimpleColorAdjustment node)
    {
        defaultIn(node);
    }

    public void outASaturationSimpleColorAdjustment(ASaturationSimpleColorAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASaturationSimpleColorAdjustment(ASaturationSimpleColorAdjustment node)
    {
        inASaturationSimpleColorAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSaturationToken() != null)
        {
            node.getSaturationToken().apply(this);
        }
        outASaturationSimpleColorAdjustment(node);
    }

    public void inAAlphaSimpleColorAdjustment(AAlphaSimpleColorAdjustment node)
    {
        defaultIn(node);
    }

    public void outAAlphaSimpleColorAdjustment(AAlphaSimpleColorAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlphaSimpleColorAdjustment(AAlphaSimpleColorAdjustment node)
    {
        inAAlphaSimpleColorAdjustment(node);
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getAlphaToken() != null)
        {
            node.getAlphaToken().apply(this);
        }
        outAAlphaSimpleColorAdjustment(node);
    }

    public void inAHueTargetColorAdjustment(AHueTargetColorAdjustment node)
    {
        defaultIn(node);
    }

    public void outAHueTargetColorAdjustment(AHueTargetColorAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHueTargetColorAdjustment(AHueTargetColorAdjustment node)
    {
        inAHueTargetColorAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTargetHueToken() != null)
        {
            node.getTargetHueToken().apply(this);
        }
        outAHueTargetColorAdjustment(node);
    }

    public void inABrightnessTargetColorAdjustment(ABrightnessTargetColorAdjustment node)
    {
        defaultIn(node);
    }

    public void outABrightnessTargetColorAdjustment(ABrightnessTargetColorAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABrightnessTargetColorAdjustment(ABrightnessTargetColorAdjustment node)
    {
        inABrightnessTargetColorAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTargetBrightnessToken() != null)
        {
            node.getTargetBrightnessToken().apply(this);
        }
        outABrightnessTargetColorAdjustment(node);
    }

    public void inASaturationTargetColorAdjustment(ASaturationTargetColorAdjustment node)
    {
        defaultIn(node);
    }

    public void outASaturationTargetColorAdjustment(ASaturationTargetColorAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASaturationTargetColorAdjustment(ASaturationTargetColorAdjustment node)
    {
        inASaturationTargetColorAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTargetSaturationToken() != null)
        {
            node.getTargetSaturationToken().apply(this);
        }
        outASaturationTargetColorAdjustment(node);
    }

    public void inAAlphaTargetColorAdjustment(AAlphaTargetColorAdjustment node)
    {
        defaultIn(node);
    }

    public void outAAlphaTargetColorAdjustment(AAlphaTargetColorAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlphaTargetColorAdjustment(AAlphaTargetColorAdjustment node)
    {
        inAAlphaTargetColorAdjustment(node);
        if(node.getBar() != null)
        {
            node.getBar().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getTargetAlphaToken() != null)
        {
            node.getTargetAlphaToken().apply(this);
        }
        outAAlphaTargetColorAdjustment(node);
    }

    public void inAXGeometryAdjustment(AXGeometryAdjustment node)
    {
        defaultIn(node);
    }

    public void outAXGeometryAdjustment(AXGeometryAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXGeometryAdjustment(AXGeometryAdjustment node)
    {
        inAXGeometryAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getXToken() != null)
        {
            node.getXToken().apply(this);
        }
        outAXGeometryAdjustment(node);
    }

    public void inAYGeometryAdjustment(AYGeometryAdjustment node)
    {
        defaultIn(node);
    }

    public void outAYGeometryAdjustment(AYGeometryAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAYGeometryAdjustment(AYGeometryAdjustment node)
    {
        inAYGeometryAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getYToken() != null)
        {
            node.getYToken().apply(this);
        }
        outAYGeometryAdjustment(node);
    }

    public void inASizeGeometryAdjustment(ASizeGeometryAdjustment node)
    {
        defaultIn(node);
    }

    public void outASizeGeometryAdjustment(ASizeGeometryAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASizeGeometryAdjustment(ASizeGeometryAdjustment node)
    {
        inASizeGeometryAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSizeToken() != null)
        {
            node.getSizeToken().apply(this);
        }
        outASizeGeometryAdjustment(node);
    }

    public void inASize2GeometryAdjustment(ASize2GeometryAdjustment node)
    {
        defaultIn(node);
    }

    public void outASize2GeometryAdjustment(ASize2GeometryAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASize2GeometryAdjustment(ASize2GeometryAdjustment node)
    {
        inASize2GeometryAdjustment(node);
        if(node.getSecondExpression() != null)
        {
            node.getSecondExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        if(node.getSizeToken() != null)
        {
            node.getSizeToken().apply(this);
        }
        outASize2GeometryAdjustment(node);
    }

    public void inAFlipGeometryAdjustment(AFlipGeometryAdjustment node)
    {
        defaultIn(node);
    }

    public void outAFlipGeometryAdjustment(AFlipGeometryAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFlipGeometryAdjustment(AFlipGeometryAdjustment node)
    {
        inAFlipGeometryAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getFlipToken() != null)
        {
            node.getFlipToken().apply(this);
        }
        outAFlipGeometryAdjustment(node);
    }

    public void inASkewGeometryAdjustment(ASkewGeometryAdjustment node)
    {
        defaultIn(node);
    }

    public void outASkewGeometryAdjustment(ASkewGeometryAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASkewGeometryAdjustment(ASkewGeometryAdjustment node)
    {
        inASkewGeometryAdjustment(node);
        if(node.getSecondExpression() != null)
        {
            node.getSecondExpression().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        if(node.getSkewToken() != null)
        {
            node.getSkewToken().apply(this);
        }
        outASkewGeometryAdjustment(node);
    }

    public void inARotateGeometryAdjustment(ARotateGeometryAdjustment node)
    {
        defaultIn(node);
    }

    public void outARotateGeometryAdjustment(ARotateGeometryAdjustment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARotateGeometryAdjustment(ARotateGeometryAdjustment node)
    {
        inARotateGeometryAdjustment(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRotateToken() != null)
        {
            node.getRotateToken().apply(this);
        }
        outARotateGeometryAdjustment(node);
    }

    public void inANumberExpression(ANumberExpression node)
    {
        defaultIn(node);
    }

    public void outANumberExpression(ANumberExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberExpression(ANumberExpression node)
    {
        inANumberExpression(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberExpression(node);
    }

    public void inANestedExpression(ANestedExpression node)
    {
        defaultIn(node);
    }

    public void outANestedExpression(ANestedExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedExpression(ANestedExpression node)
    {
        inANestedExpression(node);
        if(node.getRRbkt() != null)
        {
            node.getRRbkt().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getLRbkt() != null)
        {
            node.getLRbkt().apply(this);
        }
        outANestedExpression(node);
    }

    public void inAFunctionExpression(AFunctionExpression node)
    {
        defaultIn(node);
    }

    public void outAFunctionExpression(AFunctionExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionExpression(AFunctionExpression node)
    {
        inAFunctionExpression(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionExpression(node);
    }

    public void inANumberExpression2(ANumberExpression2 node)
    {
        defaultIn(node);
    }

    public void outANumberExpression2(ANumberExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberExpression2(ANumberExpression2 node)
    {
        inANumberExpression2(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberExpression2(node);
    }

    public void inAFunctionExpression2(AFunctionExpression2 node)
    {
        defaultIn(node);
    }

    public void outAFunctionExpression2(AFunctionExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionExpression2(AFunctionExpression2 node)
    {
        inAFunctionExpression2(node);
        if(node.getFunction() != null)
        {
            node.getFunction().apply(this);
        }
        outAFunctionExpression2(node);
    }

    public void inANestedExpression2(ANestedExpression2 node)
    {
        defaultIn(node);
    }

    public void outANestedExpression2(ANestedExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedExpression2(ANestedExpression2 node)
    {
        inANestedExpression2(node);
        if(node.getRRbkt() != null)
        {
            node.getRRbkt().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        if(node.getLRbkt() != null)
        {
            node.getLRbkt().apply(this);
        }
        outANestedExpression2(node);
    }

    public void inAComposedExpression2(AComposedExpression2 node)
    {
        defaultIn(node);
    }

    public void outAComposedExpression2(AComposedExpression2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComposedExpression2(AComposedExpression2 node)
    {
        inAComposedExpression2(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getOperator() != null)
        {
            node.getOperator().apply(this);
        }
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAComposedExpression2(node);
    }

    public void inAArg0Function(AArg0Function node)
    {
        defaultIn(node);
    }

    public void outAArg0Function(AArg0Function node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArg0Function(AArg0Function node)
    {
        inAArg0Function(node);
        if(node.getRRbkt() != null)
        {
            node.getRRbkt().apply(this);
        }
        if(node.getLRbkt() != null)
        {
            node.getLRbkt().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAArg0Function(node);
    }

    public void inAArg1Function(AArg1Function node)
    {
        defaultIn(node);
    }

    public void outAArg1Function(AArg1Function node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArg1Function(AArg1Function node)
    {
        inAArg1Function(node);
        if(node.getRRbkt() != null)
        {
            node.getRRbkt().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        if(node.getLRbkt() != null)
        {
            node.getLRbkt().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAArg1Function(node);
    }

    public void inAArg2Function(AArg2Function node)
    {
        defaultIn(node);
    }

    public void outAArg2Function(AArg2Function node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArg2Function(AArg2Function node)
    {
        inAArg2Function(node);
        if(node.getRRbkt() != null)
        {
            node.getRRbkt().apply(this);
        }
        if(node.getSecondExpression() != null)
        {
            node.getSecondExpression().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFirstExpression() != null)
        {
            node.getFirstExpression().apply(this);
        }
        if(node.getLRbkt() != null)
        {
            node.getLRbkt().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAArg2Function(node);
    }

    public void inAFirstExpression(AFirstExpression node)
    {
        defaultIn(node);
    }

    public void outAFirstExpression(AFirstExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFirstExpression(AFirstExpression node)
    {
        inAFirstExpression(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAFirstExpression(node);
    }

    public void inASecondExpression(ASecondExpression node)
    {
        defaultIn(node);
    }

    public void outASecondExpression(ASecondExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASecondExpression(ASecondExpression node)
    {
        inASecondExpression(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outASecondExpression(node);
    }

    public void inAThirdExpression(AThirdExpression node)
    {
        defaultIn(node);
    }

    public void outAThirdExpression(AThirdExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThirdExpression(AThirdExpression node)
    {
        inAThirdExpression(node);
        if(node.getExpression2() != null)
        {
            node.getExpression2().apply(this);
        }
        outAThirdExpression(node);
    }
}

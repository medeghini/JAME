/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.jame.contextfree.cfdg.node;

import net.sf.jame.contextfree.cfdg.analysis.*;

@SuppressWarnings("nls")
public final class ARuleDeclaration extends PRuleDeclaration
{
    private TRule _rule_;
    private TString _string_;
    private TNumber _number_;
    private PListShapeReplacement _listShapeReplacement_;

    public ARuleDeclaration()
    {
        // Constructor
    }

    public ARuleDeclaration(
        @SuppressWarnings("hiding") TRule _rule_,
        @SuppressWarnings("hiding") TString _string_,
        @SuppressWarnings("hiding") TNumber _number_,
        @SuppressWarnings("hiding") PListShapeReplacement _listShapeReplacement_)
    {
        // Constructor
        setRule(_rule_);

        setString(_string_);

        setNumber(_number_);

        setListShapeReplacement(_listShapeReplacement_);

    }

    @Override
    public Object clone()
    {
        return new ARuleDeclaration(
            cloneNode(this._rule_),
            cloneNode(this._string_),
            cloneNode(this._number_),
            cloneNode(this._listShapeReplacement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARuleDeclaration(this);
    }

    public TRule getRule()
    {
        return this._rule_;
    }

    public void setRule(TRule node)
    {
        if(this._rule_ != null)
        {
            this._rule_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rule_ = node;
    }

    public TString getString()
    {
        return this._string_;
    }

    public void setString(TString node)
    {
        if(this._string_ != null)
        {
            this._string_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._string_ = node;
    }

    public TNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(TNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    public PListShapeReplacement getListShapeReplacement()
    {
        return this._listShapeReplacement_;
    }

    public void setListShapeReplacement(PListShapeReplacement node)
    {
        if(this._listShapeReplacement_ != null)
        {
            this._listShapeReplacement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listShapeReplacement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._rule_)
            + toString(this._string_)
            + toString(this._number_)
            + toString(this._listShapeReplacement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._rule_ == child)
        {
            this._rule_ = null;
            return;
        }

        if(this._string_ == child)
        {
            this._string_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        if(this._listShapeReplacement_ == child)
        {
            this._listShapeReplacement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._rule_ == oldChild)
        {
            setRule((TRule) newChild);
            return;
        }

        if(this._string_ == oldChild)
        {
            setString((TString) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((TNumber) newChild);
            return;
        }

        if(this._listShapeReplacement_ == oldChild)
        {
            setListShapeReplacement((PListShapeReplacement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.jame.contextfree.cfdg.node;

import net.sf.jame.contextfree.cfdg.analysis.*;

@SuppressWarnings("nls")
public final class ALoopShapeReplacementDeclaration extends PShapeReplacementDeclaration
{
    private PLoopShapeReplacement _loopShapeReplacement_;

    public ALoopShapeReplacementDeclaration()
    {
        // Constructor
    }

    public ALoopShapeReplacementDeclaration(
        @SuppressWarnings("hiding") PLoopShapeReplacement _loopShapeReplacement_)
    {
        // Constructor
        setLoopShapeReplacement(_loopShapeReplacement_);

    }

    @Override
    public Object clone()
    {
        return new ALoopShapeReplacementDeclaration(
            cloneNode(this._loopShapeReplacement_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALoopShapeReplacementDeclaration(this);
    }

    public PLoopShapeReplacement getLoopShapeReplacement()
    {
        return this._loopShapeReplacement_;
    }

    public void setLoopShapeReplacement(PLoopShapeReplacement node)
    {
        if(this._loopShapeReplacement_ != null)
        {
            this._loopShapeReplacement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._loopShapeReplacement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._loopShapeReplacement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._loopShapeReplacement_ == child)
        {
            this._loopShapeReplacement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._loopShapeReplacement_ == oldChild)
        {
            setLoopShapeReplacement((PLoopShapeReplacement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
